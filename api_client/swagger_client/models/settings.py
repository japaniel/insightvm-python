# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_linking': 'bool',
        'authentication': 'AuthenticationSettings',
        'database': 'DatabaseSettings',
        'directory': 'str',
        'insight_platform': 'bool',
        'insight_platform_region': 'str',
        'links': 'list[Link]',
        'risk': 'RiskSettings',
        'scan': 'ScanSettings',
        'serial_number': 'str',
        'smtp': 'SmtpSettings',
        'updates': 'UpdateSettings',
        'uuid': 'str',
        'web': 'WebSettings'
    }

    attribute_map = {
        'asset_linking': 'assetLinking',
        'authentication': 'authentication',
        'database': 'database',
        'directory': 'directory',
        'insight_platform': 'insightPlatform',
        'insight_platform_region': 'insightPlatformRegion',
        'links': 'links',
        'risk': 'risk',
        'scan': 'scan',
        'serial_number': 'serialNumber',
        'smtp': 'smtp',
        'updates': 'updates',
        'uuid': 'uuid',
        'web': 'web'
    }

    def __init__(self, asset_linking=None, authentication=None, database=None, directory=None, insight_platform=None, insight_platform_region=None, links=None, risk=None, scan=None, serial_number=None, smtp=None, updates=None, uuid=None, web=None):  # noqa: E501
        """Settings - a model defined in Swagger"""  # noqa: E501
        self._asset_linking = None
        self._authentication = None
        self._database = None
        self._directory = None
        self._insight_platform = None
        self._insight_platform_region = None
        self._links = None
        self._risk = None
        self._scan = None
        self._serial_number = None
        self._smtp = None
        self._updates = None
        self._uuid = None
        self._web = None
        self.discriminator = None
        if asset_linking is not None:
            self.asset_linking = asset_linking
        if authentication is not None:
            self.authentication = authentication
        if database is not None:
            self.database = database
        if directory is not None:
            self.directory = directory
        if insight_platform is not None:
            self.insight_platform = insight_platform
        if insight_platform_region is not None:
            self.insight_platform_region = insight_platform_region
        if links is not None:
            self.links = links
        if risk is not None:
            self.risk = risk
        if scan is not None:
            self.scan = scan
        if serial_number is not None:
            self.serial_number = serial_number
        if smtp is not None:
            self.smtp = smtp
        if updates is not None:
            self.updates = updates
        if uuid is not None:
            self.uuid = uuid
        if web is not None:
            self.web = web

    @property
    def asset_linking(self):
        """Gets the asset_linking of this Settings.  # noqa: E501

        Whether asset linking is enabled.  # noqa: E501

        :return: The asset_linking of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._asset_linking

    @asset_linking.setter
    def asset_linking(self, asset_linking):
        """Sets the asset_linking of this Settings.

        Whether asset linking is enabled.  # noqa: E501

        :param asset_linking: The asset_linking of this Settings.  # noqa: E501
        :type: bool
        """

        self._asset_linking = asset_linking

    @property
    def authentication(self):
        """Gets the authentication of this Settings.  # noqa: E501


        :return: The authentication of this Settings.  # noqa: E501
        :rtype: AuthenticationSettings
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this Settings.


        :param authentication: The authentication of this Settings.  # noqa: E501
        :type: AuthenticationSettings
        """

        self._authentication = authentication

    @property
    def database(self):
        """Gets the database of this Settings.  # noqa: E501


        :return: The database of this Settings.  # noqa: E501
        :rtype: DatabaseSettings
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this Settings.


        :param database: The database of this Settings.  # noqa: E501
        :type: DatabaseSettings
        """

        self._database = database

    @property
    def directory(self):
        """Gets the directory of this Settings.  # noqa: E501

        The root directory of the console.  # noqa: E501

        :return: The directory of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this Settings.

        The root directory of the console.  # noqa: E501

        :param directory: The directory of this Settings.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def insight_platform(self):
        """Gets the insight_platform of this Settings.  # noqa: E501

        Whether the usage of the Insight Platform is enabled.  # noqa: E501

        :return: The insight_platform of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._insight_platform

    @insight_platform.setter
    def insight_platform(self, insight_platform):
        """Sets the insight_platform of this Settings.

        Whether the usage of the Insight Platform is enabled.  # noqa: E501

        :param insight_platform: The insight_platform of this Settings.  # noqa: E501
        :type: bool
        """

        self._insight_platform = insight_platform

    @property
    def insight_platform_region(self):
        """Gets the insight_platform_region of this Settings.  # noqa: E501

        The region used for the Insight Platform, if enabled.  # noqa: E501

        :return: The insight_platform_region of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._insight_platform_region

    @insight_platform_region.setter
    def insight_platform_region(self, insight_platform_region):
        """Sets the insight_platform_region of this Settings.

        The region used for the Insight Platform, if enabled.  # noqa: E501

        :param insight_platform_region: The insight_platform_region of this Settings.  # noqa: E501
        :type: str
        """

        self._insight_platform_region = insight_platform_region

    @property
    def links(self):
        """Gets the links of this Settings.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Settings.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Settings.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Settings.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def risk(self):
        """Gets the risk of this Settings.  # noqa: E501


        :return: The risk of this Settings.  # noqa: E501
        :rtype: RiskSettings
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this Settings.


        :param risk: The risk of this Settings.  # noqa: E501
        :type: RiskSettings
        """

        self._risk = risk

    @property
    def scan(self):
        """Gets the scan of this Settings.  # noqa: E501


        :return: The scan of this Settings.  # noqa: E501
        :rtype: ScanSettings
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this Settings.


        :param scan: The scan of this Settings.  # noqa: E501
        :type: ScanSettings
        """

        self._scan = scan

    @property
    def serial_number(self):
        """Gets the serial_number of this Settings.  # noqa: E501

        The console serial number.  # noqa: E501

        :return: The serial_number of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Settings.

        The console serial number.  # noqa: E501

        :param serial_number: The serial_number of this Settings.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def smtp(self):
        """Gets the smtp of this Settings.  # noqa: E501


        :return: The smtp of this Settings.  # noqa: E501
        :rtype: SmtpSettings
        """
        return self._smtp

    @smtp.setter
    def smtp(self, smtp):
        """Sets the smtp of this Settings.


        :param smtp: The smtp of this Settings.  # noqa: E501
        :type: SmtpSettings
        """

        self._smtp = smtp

    @property
    def updates(self):
        """Gets the updates of this Settings.  # noqa: E501


        :return: The updates of this Settings.  # noqa: E501
        :rtype: UpdateSettings
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this Settings.


        :param updates: The updates of this Settings.  # noqa: E501
        :type: UpdateSettings
        """

        self._updates = updates

    @property
    def uuid(self):
        """Gets the uuid of this Settings.  # noqa: E501

        The universally unique identifier (UUID) of the console.  # noqa: E501

        :return: The uuid of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Settings.

        The universally unique identifier (UUID) of the console.  # noqa: E501

        :param uuid: The uuid of this Settings.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def web(self):
        """Gets the web of this Settings.  # noqa: E501


        :return: The web of this Settings.  # noqa: E501
        :rtype: WebSettings
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this Settings.


        :param web: The web of this Settings.  # noqa: E501
        :type: WebSettings
        """

        self._web = web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
