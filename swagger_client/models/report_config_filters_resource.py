# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportConfigFiltersResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'ReportConfigCategoryFilters',
        'severity': 'str',
        'statuses': 'list[str]'
    }

    attribute_map = {
        'categories': 'categories',
        'severity': 'severity',
        'statuses': 'statuses'
    }

    def __init__(self, categories=None, severity=None, statuses=None):  # noqa: E501
        """ReportConfigFiltersResource - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._severity = None
        self._statuses = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if severity is not None:
            self.severity = severity
        if statuses is not None:
            self.statuses = statuses

    @property
    def categories(self):
        """Gets the categories of this ReportConfigFiltersResource.  # noqa: E501


        :return: The categories of this ReportConfigFiltersResource.  # noqa: E501
        :rtype: ReportConfigCategoryFilters
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ReportConfigFiltersResource.


        :param categories: The categories of this ReportConfigFiltersResource.  # noqa: E501
        :type: ReportConfigCategoryFilters
        """

        self._categories = categories

    @property
    def severity(self):
        """Gets the severity of this ReportConfigFiltersResource.  # noqa: E501

        The vulnerability severities to include. Defaults to `all`.  # noqa: E501

        :return: The severity of this ReportConfigFiltersResource.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ReportConfigFiltersResource.

        The vulnerability severities to include. Defaults to `all`.  # noqa: E501

        :param severity: The severity of this ReportConfigFiltersResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "critical", "critical-and-severe"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def statuses(self):
        """Gets the statuses of this ReportConfigFiltersResource.  # noqa: E501

        The vulnerability statuses to include. Defaults to [ `vulnerable`, `vulnerable-version`, `potentially-vulnerable` ].  # noqa: E501

        :return: The statuses of this ReportConfigFiltersResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ReportConfigFiltersResource.

        The vulnerability statuses to include. Defaults to [ `vulnerable`, `vulnerable-version`, `potentially-vulnerable` ].  # noqa: E501

        :param statuses: The statuses of this ReportConfigFiltersResource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["vulnerable", "vulnerable-version", "potentially-vulnerable", "vulnerable-and-validated"]  # noqa: E501
        if not set(statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._statuses = statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportConfigFiltersResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportConfigFiltersResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
