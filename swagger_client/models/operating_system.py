# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperatingSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'architecture': 'str',
        'configurations': 'list[Configuration]',
        'cpe': 'OperatingSystemCpe',
        'description': 'str',
        'family': 'str',
        'id': 'int',
        'product': 'str',
        'system_name': 'str',
        'type': 'str',
        'vendor': 'str',
        'version': 'str'
    }

    attribute_map = {
        'architecture': 'architecture',
        'configurations': 'configurations',
        'cpe': 'cpe',
        'description': 'description',
        'family': 'family',
        'id': 'id',
        'product': 'product',
        'system_name': 'systemName',
        'type': 'type',
        'vendor': 'vendor',
        'version': 'version'
    }

    def __init__(self, architecture=None, configurations=None, cpe=None, description=None, family=None, id=None, product=None, system_name=None, type=None, vendor=None, version=None):  # noqa: E501
        """OperatingSystem - a model defined in Swagger"""  # noqa: E501
        self._architecture = None
        self._configurations = None
        self._cpe = None
        self._description = None
        self._family = None
        self._id = None
        self._product = None
        self._system_name = None
        self._type = None
        self._vendor = None
        self._version = None
        self.discriminator = None
        if architecture is not None:
            self.architecture = architecture
        if configurations is not None:
            self.configurations = configurations
        if cpe is not None:
            self.cpe = cpe
        if description is not None:
            self.description = description
        if family is not None:
            self.family = family
        if id is not None:
            self.id = id
        if product is not None:
            self.product = product
        if system_name is not None:
            self.system_name = system_name
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version

    @property
    def architecture(self):
        """Gets the architecture of this OperatingSystem.  # noqa: E501

        The architecture of the operating system.  # noqa: E501

        :return: The architecture of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this OperatingSystem.

        The architecture of the operating system.  # noqa: E501

        :param architecture: The architecture of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def configurations(self):
        """Gets the configurations of this OperatingSystem.  # noqa: E501

        Configuration key-values pairs enumerated on the operating system.  # noqa: E501

        :return: The configurations of this OperatingSystem.  # noqa: E501
        :rtype: list[Configuration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this OperatingSystem.

        Configuration key-values pairs enumerated on the operating system.  # noqa: E501

        :param configurations: The configurations of this OperatingSystem.  # noqa: E501
        :type: list[Configuration]
        """

        self._configurations = configurations

    @property
    def cpe(self):
        """Gets the cpe of this OperatingSystem.  # noqa: E501


        :return: The cpe of this OperatingSystem.  # noqa: E501
        :rtype: OperatingSystemCpe
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this OperatingSystem.


        :param cpe: The cpe of this OperatingSystem.  # noqa: E501
        :type: OperatingSystemCpe
        """

        self._cpe = cpe

    @property
    def description(self):
        """Gets the description of this OperatingSystem.  # noqa: E501

        The description of the operating system (containing vendor, family, product, version and architecture in a single string).  # noqa: E501

        :return: The description of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OperatingSystem.

        The description of the operating system (containing vendor, family, product, version and architecture in a single string).  # noqa: E501

        :param description: The description of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def family(self):
        """Gets the family of this OperatingSystem.  # noqa: E501

        The family of the operating system.  # noqa: E501

        :return: The family of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this OperatingSystem.

        The family of the operating system.  # noqa: E501

        :param family: The family of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this OperatingSystem.  # noqa: E501

        The identifier of the operating system.  # noqa: E501

        :return: The id of this OperatingSystem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperatingSystem.

        The identifier of the operating system.  # noqa: E501

        :param id: The id of this OperatingSystem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this OperatingSystem.  # noqa: E501

        The name of the operating system.  # noqa: E501

        :return: The product of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this OperatingSystem.

        The name of the operating system.  # noqa: E501

        :param product: The product of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def system_name(self):
        """Gets the system_name of this OperatingSystem.  # noqa: E501

        A combination of vendor and family (with redundancies removed), suitable for grouping.  # noqa: E501

        :return: The system_name of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this OperatingSystem.

        A combination of vendor and family (with redundancies removed), suitable for grouping.  # noqa: E501

        :param system_name: The system_name of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def type(self):
        """Gets the type of this OperatingSystem.  # noqa: E501

        The type of operating system.  # noqa: E501

        :return: The type of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperatingSystem.

        The type of operating system.  # noqa: E501

        :param type: The type of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this OperatingSystem.  # noqa: E501

        The vendor of the operating system.  # noqa: E501

        :return: The vendor of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this OperatingSystem.

        The vendor of the operating system.  # noqa: E501

        :param vendor: The vendor of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this OperatingSystem.  # noqa: E501

        The version of the operating system.  # noqa: E501

        :return: The version of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OperatingSystem.

        The version of the operating system.  # noqa: E501

        :param version: The version of this OperatingSystem.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatingSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatingSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
