# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenseLimits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'int',
        'assets_with_hosted_engine': 'int',
        'scan_engines': 'int',
        'users': 'int'
    }

    attribute_map = {
        'assets': 'assets',
        'assets_with_hosted_engine': 'assetsWithHostedEngine',
        'scan_engines': 'scanEngines',
        'users': 'users'
    }

    def __init__(self, assets=None, assets_with_hosted_engine=None, scan_engines=None, users=None):  # noqa: E501
        """LicenseLimits - a model defined in Swagger"""  # noqa: E501
        self._assets = None
        self._assets_with_hosted_engine = None
        self._scan_engines = None
        self._users = None
        self.discriminator = None
        if assets is not None:
            self.assets = assets
        if assets_with_hosted_engine is not None:
            self.assets_with_hosted_engine = assets_with_hosted_engine
        if scan_engines is not None:
            self.scan_engines = scan_engines
        if users is not None:
            self.users = users

    @property
    def assets(self):
        """Gets the assets of this LicenseLimits.  # noqa: E501

        The maximum number of assets that can be assessed.  # noqa: E501

        :return: The assets of this LicenseLimits.  # noqa: E501
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this LicenseLimits.

        The maximum number of assets that can be assessed.  # noqa: E501

        :param assets: The assets of this LicenseLimits.  # noqa: E501
        :type: int
        """

        self._assets = assets

    @property
    def assets_with_hosted_engine(self):
        """Gets the assets_with_hosted_engine of this LicenseLimits.  # noqa: E501

        The maximum number of assets that may be scanned with the hosted scan engine.  # noqa: E501

        :return: The assets_with_hosted_engine of this LicenseLimits.  # noqa: E501
        :rtype: int
        """
        return self._assets_with_hosted_engine

    @assets_with_hosted_engine.setter
    def assets_with_hosted_engine(self, assets_with_hosted_engine):
        """Sets the assets_with_hosted_engine of this LicenseLimits.

        The maximum number of assets that may be scanned with the hosted scan engine.  # noqa: E501

        :param assets_with_hosted_engine: The assets_with_hosted_engine of this LicenseLimits.  # noqa: E501
        :type: int
        """

        self._assets_with_hosted_engine = assets_with_hosted_engine

    @property
    def scan_engines(self):
        """Gets the scan_engines of this LicenseLimits.  # noqa: E501

        The maximum number of scan engines that may be used.  # noqa: E501

        :return: The scan_engines of this LicenseLimits.  # noqa: E501
        :rtype: int
        """
        return self._scan_engines

    @scan_engines.setter
    def scan_engines(self, scan_engines):
        """Sets the scan_engines of this LicenseLimits.

        The maximum number of scan engines that may be used.  # noqa: E501

        :param scan_engines: The scan_engines of this LicenseLimits.  # noqa: E501
        :type: int
        """

        self._scan_engines = scan_engines

    @property
    def users(self):
        """Gets the users of this LicenseLimits.  # noqa: E501

        The maximum number of users allowed.  # noqa: E501

        :return: The users of this LicenseLimits.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this LicenseLimits.

        The maximum number of users allowed.  # noqa: E501

        :param users: The users of this LicenseLimits.  # noqa: E501
        :type: int
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseLimits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseLimits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
