# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExceptionScope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'links': 'list[Link]',
        'port': 'int',
        'type': 'str',
        'vulnerability': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'links': 'links',
        'port': 'port',
        'type': 'type',
        'vulnerability': 'vulnerability'
    }

    def __init__(self, id=None, key=None, links=None, port=None, type=None, vulnerability=None):  # noqa: E501
        """ExceptionScope - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._key = None
        self._links = None
        self._port = None
        self._type = None
        self._vulnerability = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if links is not None:
            self.links = links
        if port is not None:
            self.port = port
        if type is not None:
            self.type = type
        if vulnerability is not None:
            self.vulnerability = vulnerability

    @property
    def id(self):
        """Gets the id of this ExceptionScope.  # noqa: E501

        The identifier of the vulnerability to which the exception applies.  # noqa: E501

        :return: The id of this ExceptionScope.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExceptionScope.

        The identifier of the vulnerability to which the exception applies.  # noqa: E501

        :param id: The id of this ExceptionScope.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ExceptionScope.  # noqa: E501

        If the scope type is `\"Instance\"`, an optional key to discriminate the instance the exception applies to.  # noqa: E501

        :return: The key of this ExceptionScope.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ExceptionScope.

        If the scope type is `\"Instance\"`, an optional key to discriminate the instance the exception applies to.  # noqa: E501

        :param key: The key of this ExceptionScope.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def links(self):
        """Gets the links of this ExceptionScope.  # noqa: E501


        :return: The links of this ExceptionScope.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ExceptionScope.


        :param links: The links of this ExceptionScope.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def port(self):
        """Gets the port of this ExceptionScope.  # noqa: E501

        If the scope type is `\"Instance\"` and the vulnerability is detected on a service, the port on which the exception applies.  # noqa: E501

        :return: The port of this ExceptionScope.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ExceptionScope.

        If the scope type is `\"Instance\"` and the vulnerability is detected on a service, the port on which the exception applies.  # noqa: E501

        :param port: The port of this ExceptionScope.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def type(self):
        """Gets the type of this ExceptionScope.  # noqa: E501

        The type of the exception scope. One of: `\"Global\"`, `\"Site\"`, `\"Asset\"`, `\"Asset Group\"`, `\"Instance\"`  # noqa: E501

        :return: The type of this ExceptionScope.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExceptionScope.

        The type of the exception scope. One of: `\"Global\"`, `\"Site\"`, `\"Asset\"`, `\"Asset Group\"`, `\"Instance\"`  # noqa: E501

        :param type: The type of this ExceptionScope.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vulnerability(self):
        """Gets the vulnerability of this ExceptionScope.  # noqa: E501

        The identifier of the vulnerability to which the exception applies.  # noqa: E501

        :return: The vulnerability of this ExceptionScope.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this ExceptionScope.

        The identifier of the vulnerability to which the exception applies.  # noqa: E501

        :param vulnerability: The vulnerability of this ExceptionScope.  # noqa: E501
        :type: str
        """

        self._vulnerability = vulnerability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExceptionScope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExceptionScope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
