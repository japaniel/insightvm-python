# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicySummaryResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decreased_compliance': 'int',
        'increased_compliance': 'int',
        'links': 'list[Link]',
        'number_of_policies': 'int',
        'overall_compliance': 'float',
        'scanned_policies': 'int'
    }

    attribute_map = {
        'decreased_compliance': 'decreasedCompliance',
        'increased_compliance': 'increasedCompliance',
        'links': 'links',
        'number_of_policies': 'numberOfPolicies',
        'overall_compliance': 'overallCompliance',
        'scanned_policies': 'scannedPolicies'
    }

    def __init__(self, decreased_compliance=None, increased_compliance=None, links=None, number_of_policies=None, overall_compliance=None, scanned_policies=None):  # noqa: E501
        """PolicySummaryResource - a model defined in Swagger"""  # noqa: E501
        self._decreased_compliance = None
        self._increased_compliance = None
        self._links = None
        self._number_of_policies = None
        self._overall_compliance = None
        self._scanned_policies = None
        self.discriminator = None
        if decreased_compliance is not None:
            self.decreased_compliance = decreased_compliance
        if increased_compliance is not None:
            self.increased_compliance = increased_compliance
        if links is not None:
            self.links = links
        if number_of_policies is not None:
            self.number_of_policies = number_of_policies
        if overall_compliance is not None:
            self.overall_compliance = overall_compliance
        if scanned_policies is not None:
            self.scanned_policies = scanned_policies

    @property
    def decreased_compliance(self):
        """Gets the decreased_compliance of this PolicySummaryResource.  # noqa: E501

        The total number of policies whose overall compliance has decreased between the last two scans of all assets. The list of scanned policies is based on the user's list of accessible assets.  # noqa: E501

        :return: The decreased_compliance of this PolicySummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._decreased_compliance

    @decreased_compliance.setter
    def decreased_compliance(self, decreased_compliance):
        """Sets the decreased_compliance of this PolicySummaryResource.

        The total number of policies whose overall compliance has decreased between the last two scans of all assets. The list of scanned policies is based on the user's list of accessible assets.  # noqa: E501

        :param decreased_compliance: The decreased_compliance of this PolicySummaryResource.  # noqa: E501
        :type: int
        """

        self._decreased_compliance = decreased_compliance

    @property
    def increased_compliance(self):
        """Gets the increased_compliance of this PolicySummaryResource.  # noqa: E501

        The total number of policies whose overall compliance has increased between the last two scans of all assets. The list of scanned policies is based on the user's list of accessible assets.  # noqa: E501

        :return: The increased_compliance of this PolicySummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._increased_compliance

    @increased_compliance.setter
    def increased_compliance(self, increased_compliance):
        """Sets the increased_compliance of this PolicySummaryResource.

        The total number of policies whose overall compliance has increased between the last two scans of all assets. The list of scanned policies is based on the user's list of accessible assets.  # noqa: E501

        :param increased_compliance: The increased_compliance of this PolicySummaryResource.  # noqa: E501
        :type: int
        """

        self._increased_compliance = increased_compliance

    @property
    def links(self):
        """Gets the links of this PolicySummaryResource.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this PolicySummaryResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PolicySummaryResource.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this PolicySummaryResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def number_of_policies(self):
        """Gets the number_of_policies of this PolicySummaryResource.  # noqa: E501

        The total number of policies available in the Security Console.  # noqa: E501

        :return: The number_of_policies of this PolicySummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._number_of_policies

    @number_of_policies.setter
    def number_of_policies(self, number_of_policies):
        """Sets the number_of_policies of this PolicySummaryResource.

        The total number of policies available in the Security Console.  # noqa: E501

        :param number_of_policies: The number_of_policies of this PolicySummaryResource.  # noqa: E501
        :type: int
        """

        self._number_of_policies = number_of_policies

    @property
    def overall_compliance(self):
        """Gets the overall_compliance of this PolicySummaryResource.  # noqa: E501

        The ratio of compliant rules to the total number of rules across all policies.  # noqa: E501

        :return: The overall_compliance of this PolicySummaryResource.  # noqa: E501
        :rtype: float
        """
        return self._overall_compliance

    @overall_compliance.setter
    def overall_compliance(self, overall_compliance):
        """Sets the overall_compliance of this PolicySummaryResource.

        The ratio of compliant rules to the total number of rules across all policies.  # noqa: E501

        :param overall_compliance: The overall_compliance of this PolicySummaryResource.  # noqa: E501
        :type: float
        """

        self._overall_compliance = overall_compliance

    @property
    def scanned_policies(self):
        """Gets the scanned_policies of this PolicySummaryResource.  # noqa: E501

        The total number of policies that were evaluated against assets and have applicable results. The assets considered in the calculation are based on the user's list of accessible assets.  # noqa: E501

        :return: The scanned_policies of this PolicySummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._scanned_policies

    @scanned_policies.setter
    def scanned_policies(self, scanned_policies):
        """Sets the scanned_policies of this PolicySummaryResource.

        The total number of policies that were evaluated against assets and have applicable results. The assets considered in the calculation are based on the user's list of accessible assets.  # noqa: E501

        :param scanned_policies: The scanned_policies of this PolicySummaryResource.  # noqa: E501
        :type: int
        """

        self._scanned_policies = scanned_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicySummaryResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicySummaryResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
