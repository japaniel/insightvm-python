# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScanTemplateAssetDiscovery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collect_whois_information': 'bool',
        'fingerprint_minimum_certainty': 'float',
        'fingerprint_retries': 'int',
        'ip_fingerprinting_enabled': 'bool',
        'send_arp_pings': 'bool',
        'send_icmp_pings': 'bool',
        'tcp_ports': 'list[int]',
        'treat_tcp_reset_as_asset': 'bool',
        'udp_ports': 'list[int]'
    }

    attribute_map = {
        'collect_whois_information': 'collectWhoisInformation',
        'fingerprint_minimum_certainty': 'fingerprintMinimumCertainty',
        'fingerprint_retries': 'fingerprintRetries',
        'ip_fingerprinting_enabled': 'ipFingerprintingEnabled',
        'send_arp_pings': 'sendArpPings',
        'send_icmp_pings': 'sendIcmpPings',
        'tcp_ports': 'tcpPorts',
        'treat_tcp_reset_as_asset': 'treatTcpResetAsAsset',
        'udp_ports': 'udpPorts'
    }

    def __init__(self, collect_whois_information=None, fingerprint_minimum_certainty=None, fingerprint_retries=None, ip_fingerprinting_enabled=None, send_arp_pings=None, send_icmp_pings=None, tcp_ports=None, treat_tcp_reset_as_asset=None, udp_ports=None):  # noqa: E501
        """ScanTemplateAssetDiscovery - a model defined in Swagger"""  # noqa: E501
        self._collect_whois_information = None
        self._fingerprint_minimum_certainty = None
        self._fingerprint_retries = None
        self._ip_fingerprinting_enabled = None
        self._send_arp_pings = None
        self._send_icmp_pings = None
        self._tcp_ports = None
        self._treat_tcp_reset_as_asset = None
        self._udp_ports = None
        self.discriminator = None
        if collect_whois_information is not None:
            self.collect_whois_information = collect_whois_information
        if fingerprint_minimum_certainty is not None:
            self.fingerprint_minimum_certainty = fingerprint_minimum_certainty
        if fingerprint_retries is not None:
            self.fingerprint_retries = fingerprint_retries
        if ip_fingerprinting_enabled is not None:
            self.ip_fingerprinting_enabled = ip_fingerprinting_enabled
        if send_arp_pings is not None:
            self.send_arp_pings = send_arp_pings
        if send_icmp_pings is not None:
            self.send_icmp_pings = send_icmp_pings
        if tcp_ports is not None:
            self.tcp_ports = tcp_ports
        if treat_tcp_reset_as_asset is not None:
            self.treat_tcp_reset_as_asset = treat_tcp_reset_as_asset
        if udp_ports is not None:
            self.udp_ports = udp_ports

    @property
    def collect_whois_information(self):
        """Gets the collect_whois_information of this ScanTemplateAssetDiscovery.  # noqa: E501

        Whether to query Whois during discovery. Defaults to `false`.  # noqa: E501

        :return: The collect_whois_information of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._collect_whois_information

    @collect_whois_information.setter
    def collect_whois_information(self, collect_whois_information):
        """Sets the collect_whois_information of this ScanTemplateAssetDiscovery.

        Whether to query Whois during discovery. Defaults to `false`.  # noqa: E501

        :param collect_whois_information: The collect_whois_information of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: bool
        """

        self._collect_whois_information = collect_whois_information

    @property
    def fingerprint_minimum_certainty(self):
        """Gets the fingerprint_minimum_certainty of this ScanTemplateAssetDiscovery.  # noqa: E501

        The minimum certainty required for a fingerprint to be considered valid during a scan. Defaults to `0.16`.  # noqa: E501

        :return: The fingerprint_minimum_certainty of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: float
        """
        return self._fingerprint_minimum_certainty

    @fingerprint_minimum_certainty.setter
    def fingerprint_minimum_certainty(self, fingerprint_minimum_certainty):
        """Sets the fingerprint_minimum_certainty of this ScanTemplateAssetDiscovery.

        The minimum certainty required for a fingerprint to be considered valid during a scan. Defaults to `0.16`.  # noqa: E501

        :param fingerprint_minimum_certainty: The fingerprint_minimum_certainty of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: float
        """

        self._fingerprint_minimum_certainty = fingerprint_minimum_certainty

    @property
    def fingerprint_retries(self):
        """Gets the fingerprint_retries of this ScanTemplateAssetDiscovery.  # noqa: E501

        The number of fingerprinting attempts made to determine the operating system fingerprint. Defaults to `4`.  # noqa: E501

        :return: The fingerprint_retries of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: int
        """
        return self._fingerprint_retries

    @fingerprint_retries.setter
    def fingerprint_retries(self, fingerprint_retries):
        """Sets the fingerprint_retries of this ScanTemplateAssetDiscovery.

        The number of fingerprinting attempts made to determine the operating system fingerprint. Defaults to `4`.  # noqa: E501

        :param fingerprint_retries: The fingerprint_retries of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: int
        """

        self._fingerprint_retries = fingerprint_retries

    @property
    def ip_fingerprinting_enabled(self):
        """Gets the ip_fingerprinting_enabled of this ScanTemplateAssetDiscovery.  # noqa: E501

        Whether to fingerprint TCP/IP stacks for hardware, operating system and software information.  # noqa: E501

        :return: The ip_fingerprinting_enabled of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._ip_fingerprinting_enabled

    @ip_fingerprinting_enabled.setter
    def ip_fingerprinting_enabled(self, ip_fingerprinting_enabled):
        """Sets the ip_fingerprinting_enabled of this ScanTemplateAssetDiscovery.

        Whether to fingerprint TCP/IP stacks for hardware, operating system and software information.  # noqa: E501

        :param ip_fingerprinting_enabled: The ip_fingerprinting_enabled of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: bool
        """

        self._ip_fingerprinting_enabled = ip_fingerprinting_enabled

    @property
    def send_arp_pings(self):
        """Gets the send_arp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501

        Whether ARP pings are sent during asset discovery. Defaults to `true`.  # noqa: E501

        :return: The send_arp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._send_arp_pings

    @send_arp_pings.setter
    def send_arp_pings(self, send_arp_pings):
        """Sets the send_arp_pings of this ScanTemplateAssetDiscovery.

        Whether ARP pings are sent during asset discovery. Defaults to `true`.  # noqa: E501

        :param send_arp_pings: The send_arp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: bool
        """

        self._send_arp_pings = send_arp_pings

    @property
    def send_icmp_pings(self):
        """Gets the send_icmp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501

        Whether ICMP pings are sent during asset discovery. Defaults to `false`.  # noqa: E501

        :return: The send_icmp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._send_icmp_pings

    @send_icmp_pings.setter
    def send_icmp_pings(self, send_icmp_pings):
        """Sets the send_icmp_pings of this ScanTemplateAssetDiscovery.

        Whether ICMP pings are sent during asset discovery. Defaults to `false`.  # noqa: E501

        :param send_icmp_pings: The send_icmp_pings of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: bool
        """

        self._send_icmp_pings = send_icmp_pings

    @property
    def tcp_ports(self):
        """Gets the tcp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501

        TCP ports to send packets and perform discovery. Defaults to no ports.  # noqa: E501

        :return: The tcp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: list[int]
        """
        return self._tcp_ports

    @tcp_ports.setter
    def tcp_ports(self, tcp_ports):
        """Sets the tcp_ports of this ScanTemplateAssetDiscovery.

        TCP ports to send packets and perform discovery. Defaults to no ports.  # noqa: E501

        :param tcp_ports: The tcp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: list[int]
        """

        self._tcp_ports = tcp_ports

    @property
    def treat_tcp_reset_as_asset(self):
        """Gets the treat_tcp_reset_as_asset of this ScanTemplateAssetDiscovery.  # noqa: E501

        Whether TCP reset responses are treated as live assets. Defaults to `true`.  # noqa: E501

        :return: The treat_tcp_reset_as_asset of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._treat_tcp_reset_as_asset

    @treat_tcp_reset_as_asset.setter
    def treat_tcp_reset_as_asset(self, treat_tcp_reset_as_asset):
        """Sets the treat_tcp_reset_as_asset of this ScanTemplateAssetDiscovery.

        Whether TCP reset responses are treated as live assets. Defaults to `true`.  # noqa: E501

        :param treat_tcp_reset_as_asset: The treat_tcp_reset_as_asset of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: bool
        """

        self._treat_tcp_reset_as_asset = treat_tcp_reset_as_asset

    @property
    def udp_ports(self):
        """Gets the udp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501

        UDP ports to send packets and perform discovery. Defaults to no ports.  # noqa: E501

        :return: The udp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501
        :rtype: list[int]
        """
        return self._udp_ports

    @udp_ports.setter
    def udp_ports(self, udp_ports):
        """Sets the udp_ports of this ScanTemplateAssetDiscovery.

        UDP ports to send packets and perform discovery. Defaults to no ports.  # noqa: E501

        :param udp_ports: The udp_ports of this ScanTemplateAssetDiscovery.  # noqa: E501
        :type: list[int]
        """

        self._udp_ports = udp_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanTemplateAssetDiscovery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanTemplateAssetDiscovery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
