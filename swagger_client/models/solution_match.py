# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SolutionMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check': 'str',
        'confidence': 'str',
        'fingerprint': 'Fingerprint',
        'links': 'list[Link]',
        'solution': 'str',
        'type': 'str'
    }

    attribute_map = {
        'check': 'check',
        'confidence': 'confidence',
        'fingerprint': 'fingerprint',
        'links': 'links',
        'solution': 'solution',
        'type': 'type'
    }

    def __init__(self, check=None, confidence=None, fingerprint=None, links=None, solution=None, type=None):  # noqa: E501
        """SolutionMatch - a model defined in Swagger"""  # noqa: E501
        self._check = None
        self._confidence = None
        self._fingerprint = None
        self._links = None
        self._solution = None
        self._type = None
        self.discriminator = None
        if check is not None:
            self.check = check
        if confidence is not None:
            self.confidence = confidence
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if links is not None:
            self.links = links
        if solution is not None:
            self.solution = solution
        if type is not None:
            self.type = type

    @property
    def check(self):
        """Gets the check of this SolutionMatch.  # noqa: E501

        The identifier of the vulnerability check used to match the solution, if type is `check`.  # noqa: E501

        :return: The check of this SolutionMatch.  # noqa: E501
        :rtype: str
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this SolutionMatch.

        The identifier of the vulnerability check used to match the solution, if type is `check`.  # noqa: E501

        :param check: The check of this SolutionMatch.  # noqa: E501
        :type: str
        """

        self._check = check

    @property
    def confidence(self):
        """Gets the confidence of this SolutionMatch.  # noqa: E501

        The confidence of the matching process for the solution.  # noqa: E501

        :return: The confidence of this SolutionMatch.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SolutionMatch.

        The confidence of the matching process for the solution.  # noqa: E501

        :param confidence: The confidence of this SolutionMatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["exact", "partial", "none"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"  # noqa: E501
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def fingerprint(self):
        """Gets the fingerprint of this SolutionMatch.  # noqa: E501


        :return: The fingerprint of this SolutionMatch.  # noqa: E501
        :rtype: Fingerprint
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this SolutionMatch.


        :param fingerprint: The fingerprint of this SolutionMatch.  # noqa: E501
        :type: Fingerprint
        """

        self._fingerprint = fingerprint

    @property
    def links(self):
        """Gets the links of this SolutionMatch.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this SolutionMatch.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SolutionMatch.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this SolutionMatch.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def solution(self):
        """Gets the solution of this SolutionMatch.  # noqa: E501

        The identifier of the matched solution.  # noqa: E501

        :return: The solution of this SolutionMatch.  # noqa: E501
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this SolutionMatch.

        The identifier of the matched solution.  # noqa: E501

        :param solution: The solution of this SolutionMatch.  # noqa: E501
        :type: str
        """

        self._solution = solution

    @property
    def type(self):
        """Gets the type of this SolutionMatch.  # noqa: E501

        The means by which a solution was matched.  # noqa: E501

        :return: The type of this SolutionMatch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SolutionMatch.

        The means by which a solution was matched.  # noqa: E501

        :param type: The type of this SolutionMatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "check", "operating-system", "service", "software"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolutionMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolutionMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
