# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SonarCriterion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days': 'int',
        'lower': 'str',
        'search_domain': 'str',
        'type': 'str',
        'upper': 'str'
    }

    attribute_map = {
        'days': 'days',
        'lower': 'lower',
        'search_domain': 'searchDomain',
        'type': 'type',
        'upper': 'upper'
    }

    def __init__(self, days=None, lower=None, search_domain=None, type=None, upper=None):  # noqa: E501
        """SonarCriterion - a model defined in Swagger"""  # noqa: E501
        self._days = None
        self._lower = None
        self._search_domain = None
        self._type = None
        self._upper = None
        self.discriminator = None
        if days is not None:
            self.days = days
        if lower is not None:
            self.lower = lower
        if search_domain is not None:
            self.search_domain = search_domain
        if type is not None:
            self.type = type
        if upper is not None:
            self.upper = upper

    @property
    def days(self):
        """Gets the days of this SonarCriterion.  # noqa: E501

        If the field is `scan-date-within-the-last`, the number of days to search against.  # noqa: E501

        :return: The days of this SonarCriterion.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this SonarCriterion.

        If the field is `scan-date-within-the-last`, the number of days to search against.  # noqa: E501

        :param days: The days of this SonarCriterion.  # noqa: E501
        :type: int
        """

        self._days = days

    @property
    def lower(self):
        """Gets the lower of this SonarCriterion.  # noqa: E501

        If the field is `ip-address-range`, the lower limit of the search.  # noqa: E501

        :return: The lower of this SonarCriterion.  # noqa: E501
        :rtype: str
        """
        return self._lower

    @lower.setter
    def lower(self, lower):
        """Sets the lower of this SonarCriterion.

        If the field is `ip-address-range`, the lower limit of the search.  # noqa: E501

        :param lower: The lower of this SonarCriterion.  # noqa: E501
        :type: str
        """

        self._lower = lower

    @property
    def search_domain(self):
        """Gets the search_domain of this SonarCriterion.  # noqa: E501

        If the field is `domain-contains`, the domain to search against.  # noqa: E501

        :return: The search_domain of this SonarCriterion.  # noqa: E501
        :rtype: str
        """
        return self._search_domain

    @search_domain.setter
    def search_domain(self, search_domain):
        """Sets the search_domain of this SonarCriterion.

        If the field is `domain-contains`, the domain to search against.  # noqa: E501

        :param search_domain: The search_domain of this SonarCriterion.  # noqa: E501
        :type: str
        """

        self._search_domain = search_domain

    @property
    def type(self):
        """Gets the type of this SonarCriterion.  # noqa: E501

        The type of query to perform.  # noqa: E501

        :return: The type of this SonarCriterion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SonarCriterion.

        The type of query to perform.  # noqa: E501

        :param type: The type of this SonarCriterion.  # noqa: E501
        :type: str
        """
        allowed_values = ["domain-contains", "scan-date-within-the-last", "ip-address-range"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def upper(self):
        """Gets the upper of this SonarCriterion.  # noqa: E501

        If the field is `ip-address-range`, the upper limit of the search.  # noqa: E501

        :return: The upper of this SonarCriterion.  # noqa: E501
        :rtype: str
        """
        return self._upper

    @upper.setter
    def upper(self, upper):
        """Sets the upper of this SonarCriterion.

        If the field is `ip-address-range`, the upper limit of the search.  # noqa: E501

        :param upper: The upper of this SonarCriterion.  # noqa: E501
        :type: str
        """

        self._upper = upper

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SonarCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SonarCriterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
