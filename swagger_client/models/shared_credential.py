# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharedCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'SharedCredentialAccount',
        'description': 'str',
        'host_restriction': 'str',
        'id': 'int',
        'name': 'str',
        'port_restriction': 'int',
        'site_assignment': 'str',
        'sites': 'list[int]'
    }

    attribute_map = {
        'account': 'account',
        'description': 'description',
        'host_restriction': 'hostRestriction',
        'id': 'id',
        'name': 'name',
        'port_restriction': 'portRestriction',
        'site_assignment': 'siteAssignment',
        'sites': 'sites'
    }

    def __init__(self, account=None, description=None, host_restriction=None, id=None, name=None, port_restriction=None, site_assignment=None, sites=None):  # noqa: E501
        """SharedCredential - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._description = None
        self._host_restriction = None
        self._id = None
        self._name = None
        self._port_restriction = None
        self._site_assignment = None
        self._sites = None
        self.discriminator = None
        self.account = account
        if description is not None:
            self.description = description
        if host_restriction is not None:
            self.host_restriction = host_restriction
        if id is not None:
            self.id = id
        self.name = name
        if port_restriction is not None:
            self.port_restriction = port_restriction
        self.site_assignment = site_assignment
        if sites is not None:
            self.sites = sites

    @property
    def account(self):
        """Gets the account of this SharedCredential.  # noqa: E501


        :return: The account of this SharedCredential.  # noqa: E501
        :rtype: SharedCredentialAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SharedCredential.


        :param account: The account of this SharedCredential.  # noqa: E501
        :type: SharedCredentialAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def description(self):
        """Gets the description of this SharedCredential.  # noqa: E501

        The description of the credential.  # noqa: E501

        :return: The description of this SharedCredential.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SharedCredential.

        The description of the credential.  # noqa: E501

        :param description: The description of this SharedCredential.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_restriction(self):
        """Gets the host_restriction of this SharedCredential.  # noqa: E501

        The host name or IP address that you want to restrict the credentials to.  # noqa: E501

        :return: The host_restriction of this SharedCredential.  # noqa: E501
        :rtype: str
        """
        return self._host_restriction

    @host_restriction.setter
    def host_restriction(self, host_restriction):
        """Sets the host_restriction of this SharedCredential.

        The host name or IP address that you want to restrict the credentials to.  # noqa: E501

        :param host_restriction: The host_restriction of this SharedCredential.  # noqa: E501
        :type: str
        """

        self._host_restriction = host_restriction

    @property
    def id(self):
        """Gets the id of this SharedCredential.  # noqa: E501

        The identifier of the credential.  # noqa: E501

        :return: The id of this SharedCredential.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedCredential.

        The identifier of the credential.  # noqa: E501

        :param id: The id of this SharedCredential.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SharedCredential.  # noqa: E501

        The name of the credential.  # noqa: E501

        :return: The name of this SharedCredential.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedCredential.

        The name of the credential.  # noqa: E501

        :param name: The name of this SharedCredential.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def port_restriction(self):
        """Gets the port_restriction of this SharedCredential.  # noqa: E501

        Further restricts the credential to attempt to authenticate on a specific port. The port can only be restricted if the property `hostRestriction` is specified.  # noqa: E501

        :return: The port_restriction of this SharedCredential.  # noqa: E501
        :rtype: int
        """
        return self._port_restriction

    @port_restriction.setter
    def port_restriction(self, port_restriction):
        """Sets the port_restriction of this SharedCredential.

        Further restricts the credential to attempt to authenticate on a specific port. The port can only be restricted if the property `hostRestriction` is specified.  # noqa: E501

        :param port_restriction: The port_restriction of this SharedCredential.  # noqa: E501
        :type: int
        """

        self._port_restriction = port_restriction

    @property
    def site_assignment(self):
        """Gets the site_assignment of this SharedCredential.  # noqa: E501

        Assigns the shared scan credential either to be available to all sites or to a specific list of sites. The following table describes each supported value:  | Value | Description |  | ---------- | ---------------- |  | `\"all-sites\"` | The shared scan credential is assigned to all current and future sites. |  | `\"specific-sites\"` | The shared scan credential is assigned to zero sites by default. Administrators must explicitly assign sites to the shared credential. |  Shared scan credentials assigned to a site can disabled within the site configuration, if needed.  # noqa: E501

        :return: The site_assignment of this SharedCredential.  # noqa: E501
        :rtype: str
        """
        return self._site_assignment

    @site_assignment.setter
    def site_assignment(self, site_assignment):
        """Sets the site_assignment of this SharedCredential.

        Assigns the shared scan credential either to be available to all sites or to a specific list of sites. The following table describes each supported value:  | Value | Description |  | ---------- | ---------------- |  | `\"all-sites\"` | The shared scan credential is assigned to all current and future sites. |  | `\"specific-sites\"` | The shared scan credential is assigned to zero sites by default. Administrators must explicitly assign sites to the shared credential. |  Shared scan credentials assigned to a site can disabled within the site configuration, if needed.  # noqa: E501

        :param site_assignment: The site_assignment of this SharedCredential.  # noqa: E501
        :type: str
        """
        if site_assignment is None:
            raise ValueError("Invalid value for `site_assignment`, must not be `None`")  # noqa: E501

        self._site_assignment = site_assignment

    @property
    def sites(self):
        """Gets the sites of this SharedCredential.  # noqa: E501

        List of site identifiers. These sites are explicitly assigned access to the shared scan credential, allowing the site to use the credential for authentication during a scan. This property can only be set if the value of property `siteAssignment` is set to `\"specific-sites\"`. When the property `siteAssignment` is set to `\"all-sites\"`, this property will be `null`.  # noqa: E501

        :return: The sites of this SharedCredential.  # noqa: E501
        :rtype: list[int]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this SharedCredential.

        List of site identifiers. These sites are explicitly assigned access to the shared scan credential, allowing the site to use the credential for authentication during a scan. This property can only be set if the value of property `siteAssignment` is set to `\"specific-sites\"`. When the property `siteAssignment` is set to `\"all-sites\"`, this property will be `null`.  # noqa: E501

        :param sites: The sites of this SharedCredential.  # noqa: E501
        :type: list[int]
        """

        self._sites = sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
