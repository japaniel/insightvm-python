# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstallSize(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backups': 'BackupsSize',
        'database': 'DatabaseSize',
        'directory': 'File',
        'reports': 'ReportSize',
        'scans': 'ScanSize',
        'total': 'InstallationTotalSize'
    }

    attribute_map = {
        'backups': 'backups',
        'database': 'database',
        'directory': 'directory',
        'reports': 'reports',
        'scans': 'scans',
        'total': 'total'
    }

    def __init__(self, backups=None, database=None, directory=None, reports=None, scans=None, total=None):  # noqa: E501
        """InstallSize - a model defined in Swagger"""  # noqa: E501
        self._backups = None
        self._database = None
        self._directory = None
        self._reports = None
        self._scans = None
        self._total = None
        self.discriminator = None
        if backups is not None:
            self.backups = backups
        if database is not None:
            self.database = database
        if directory is not None:
            self.directory = directory
        if reports is not None:
            self.reports = reports
        if scans is not None:
            self.scans = scans
        if total is not None:
            self.total = total

    @property
    def backups(self):
        """Gets the backups of this InstallSize.  # noqa: E501


        :return: The backups of this InstallSize.  # noqa: E501
        :rtype: BackupsSize
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this InstallSize.


        :param backups: The backups of this InstallSize.  # noqa: E501
        :type: BackupsSize
        """

        self._backups = backups

    @property
    def database(self):
        """Gets the database of this InstallSize.  # noqa: E501


        :return: The database of this InstallSize.  # noqa: E501
        :rtype: DatabaseSize
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this InstallSize.


        :param database: The database of this InstallSize.  # noqa: E501
        :type: DatabaseSize
        """

        self._database = database

    @property
    def directory(self):
        """Gets the directory of this InstallSize.  # noqa: E501


        :return: The directory of this InstallSize.  # noqa: E501
        :rtype: File
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this InstallSize.


        :param directory: The directory of this InstallSize.  # noqa: E501
        :type: File
        """

        self._directory = directory

    @property
    def reports(self):
        """Gets the reports of this InstallSize.  # noqa: E501


        :return: The reports of this InstallSize.  # noqa: E501
        :rtype: ReportSize
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this InstallSize.


        :param reports: The reports of this InstallSize.  # noqa: E501
        :type: ReportSize
        """

        self._reports = reports

    @property
    def scans(self):
        """Gets the scans of this InstallSize.  # noqa: E501


        :return: The scans of this InstallSize.  # noqa: E501
        :rtype: ScanSize
        """
        return self._scans

    @scans.setter
    def scans(self, scans):
        """Sets the scans of this InstallSize.


        :param scans: The scans of this InstallSize.  # noqa: E501
        :type: ScanSize
        """

        self._scans = scans

    @property
    def total(self):
        """Gets the total of this InstallSize.  # noqa: E501


        :return: The total of this InstallSize.  # noqa: E501
        :rtype: InstallationTotalSize
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InstallSize.


        :param total: The total of this InstallSize.  # noqa: E501
        :type: InstallationTotalSize
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallSize, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
