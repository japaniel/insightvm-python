# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebHeaderAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_url': 'str',
        'enabled': 'bool',
        'headers': 'dict(str, str)',
        'id': 'int',
        'links': 'list[Link]',
        'login_regular_expression': 'str',
        'name': 'str',
        'service': 'str'
    }

    attribute_map = {
        'base_url': 'baseURL',
        'enabled': 'enabled',
        'headers': 'headers',
        'id': 'id',
        'links': 'links',
        'login_regular_expression': 'loginRegularExpression',
        'name': 'name',
        'service': 'service'
    }

    def __init__(self, base_url=None, enabled=None, headers=None, id=None, links=None, login_regular_expression=None, name=None, service=None):  # noqa: E501
        """WebHeaderAuthentication - a model defined in Swagger"""  # noqa: E501
        self._base_url = None
        self._enabled = None
        self._headers = None
        self._id = None
        self._links = None
        self._login_regular_expression = None
        self._name = None
        self._service = None
        self.discriminator = None
        if base_url is not None:
            self.base_url = base_url
        if enabled is not None:
            self.enabled = enabled
        if headers is not None:
            self.headers = headers
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if login_regular_expression is not None:
            self.login_regular_expression = login_regular_expression
        if name is not None:
            self.name = name
        if service is not None:
            self.service = service

    @property
    def base_url(self):
        """Gets the base_url of this WebHeaderAuthentication.  # noqa: E501

        The base URL is the main address from which all paths in the target Web site begin. Includes the protocol. Example: http://acme.com.  # noqa: E501

        :return: The base_url of this WebHeaderAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this WebHeaderAuthentication.

        The base URL is the main address from which all paths in the target Web site begin. Includes the protocol. Example: http://acme.com.  # noqa: E501

        :param base_url: The base_url of this WebHeaderAuthentication.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def enabled(self):
        """Gets the enabled of this WebHeaderAuthentication.  # noqa: E501

        Flag indicating whether the HTTP header web authentication is enabled for the site's scans.  # noqa: E501

        :return: The enabled of this WebHeaderAuthentication.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebHeaderAuthentication.

        Flag indicating whether the HTTP header web authentication is enabled for the site's scans.  # noqa: E501

        :param enabled: The enabled of this WebHeaderAuthentication.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def headers(self):
        """Gets the headers of this WebHeaderAuthentication.  # noqa: E501

        A map of HTTP headers the scan engine will use when negotiating with the Web server for an \"authenticated\" page. Make sure that the session ID is valid between the time you save this ID for the site and when you start the scan. Note: This property is not returned in responses for security.  # noqa: E501

        :return: The headers of this WebHeaderAuthentication.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this WebHeaderAuthentication.

        A map of HTTP headers the scan engine will use when negotiating with the Web server for an \"authenticated\" page. Make sure that the session ID is valid between the time you save this ID for the site and when you start the scan. Note: This property is not returned in responses for security.  # noqa: E501

        :param headers: The headers of this WebHeaderAuthentication.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def id(self):
        """Gets the id of this WebHeaderAuthentication.  # noqa: E501

        The identifier of the HTTP header web authentication.  # noqa: E501

        :return: The id of this WebHeaderAuthentication.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebHeaderAuthentication.

        The identifier of the HTTP header web authentication.  # noqa: E501

        :param id: The id of this WebHeaderAuthentication.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this WebHeaderAuthentication.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this WebHeaderAuthentication.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this WebHeaderAuthentication.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this WebHeaderAuthentication.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def login_regular_expression(self):
        """Gets the login_regular_expression of this WebHeaderAuthentication.  # noqa: E501

        The regular expression matches the message that the Web server returns if the login attempt fails.  # noqa: E501

        :return: The login_regular_expression of this WebHeaderAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._login_regular_expression

    @login_regular_expression.setter
    def login_regular_expression(self, login_regular_expression):
        """Sets the login_regular_expression of this WebHeaderAuthentication.

        The regular expression matches the message that the Web server returns if the login attempt fails.  # noqa: E501

        :param login_regular_expression: The login_regular_expression of this WebHeaderAuthentication.  # noqa: E501
        :type: str
        """

        self._login_regular_expression = login_regular_expression

    @property
    def name(self):
        """Gets the name of this WebHeaderAuthentication.  # noqa: E501

        The HTTP header web authentication name.  # noqa: E501

        :return: The name of this WebHeaderAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebHeaderAuthentication.

        The HTTP header web authentication name.  # noqa: E501

        :param name: The name of this WebHeaderAuthentication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service(self):
        """Gets the service of this WebHeaderAuthentication.  # noqa: E501

        Value indicating whether this web authentication  configuration is for HTML form authentication or HTTP header authentication.  # noqa: E501

        :return: The service of this WebHeaderAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this WebHeaderAuthentication.

        Value indicating whether this web authentication  configuration is for HTML form authentication or HTTP header authentication.  # noqa: E501

        :param service: The service of this WebHeaderAuthentication.  # noqa: E501
        :type: str
        """
        allowed_values = ["html-form", "http-header"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebHeaderAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebHeaderAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
