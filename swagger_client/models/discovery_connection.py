# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveryConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_id': 'str',
        'address': 'str',
        'arn': 'str',
        'aws_session_name': 'str',
        'connection_type': 'str',
        'event_source': 'str',
        'exchange_server_hostname': 'str',
        'exchange_user': 'str',
        'folder_path': 'str',
        'id': 'int',
        'ldap_server': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'port': 'int',
        'protocol': 'str',
        'region': 'str',
        'scan_engine_is_inside_aws': 'bool',
        'secret_access_key': 'str',
        'status': 'str',
        'username': 'str',
        'win_rm_server': 'str'
    }

    attribute_map = {
        'access_key_id': 'accessKeyId',
        'address': 'address',
        'arn': 'arn',
        'aws_session_name': 'awsSessionName',
        'connection_type': 'connectionType',
        'event_source': 'eventSource',
        'exchange_server_hostname': 'exchangeServerHostname',
        'exchange_user': 'exchangeUser',
        'folder_path': 'folderPath',
        'id': 'id',
        'ldap_server': 'ldapServer',
        'links': 'links',
        'name': 'name',
        'port': 'port',
        'protocol': 'protocol',
        'region': 'region',
        'scan_engine_is_inside_aws': 'scanEngineIsInsideAWS',
        'secret_access_key': 'secretAccessKey',
        'status': 'status',
        'username': 'username',
        'win_rm_server': 'winRMServer'
    }

    def __init__(self, access_key_id=None, address=None, arn=None, aws_session_name=None, connection_type=None, event_source=None, exchange_server_hostname=None, exchange_user=None, folder_path=None, id=None, ldap_server=None, links=None, name=None, port=None, protocol=None, region=None, scan_engine_is_inside_aws=None, secret_access_key=None, status=None, username=None, win_rm_server=None):  # noqa: E501
        """DiscoveryConnection - a model defined in Swagger"""  # noqa: E501
        self._access_key_id = None
        self._address = None
        self._arn = None
        self._aws_session_name = None
        self._connection_type = None
        self._event_source = None
        self._exchange_server_hostname = None
        self._exchange_user = None
        self._folder_path = None
        self._id = None
        self._ldap_server = None
        self._links = None
        self._name = None
        self._port = None
        self._protocol = None
        self._region = None
        self._scan_engine_is_inside_aws = None
        self._secret_access_key = None
        self._status = None
        self._username = None
        self._win_rm_server = None
        self.discriminator = None
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if address is not None:
            self.address = address
        if arn is not None:
            self.arn = arn
        if aws_session_name is not None:
            self.aws_session_name = aws_session_name
        if connection_type is not None:
            self.connection_type = connection_type
        if event_source is not None:
            self.event_source = event_source
        if exchange_server_hostname is not None:
            self.exchange_server_hostname = exchange_server_hostname
        if exchange_user is not None:
            self.exchange_user = exchange_user
        if folder_path is not None:
            self.folder_path = folder_path
        if id is not None:
            self.id = id
        if ldap_server is not None:
            self.ldap_server = ldap_server
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if region is not None:
            self.region = region
        if scan_engine_is_inside_aws is not None:
            self.scan_engine_is_inside_aws = scan_engine_is_inside_aws
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key
        if status is not None:
            self.status = status
        if username is not None:
            self.username = username
        if win_rm_server is not None:
            self.win_rm_server = win_rm_server

    @property
    def access_key_id(self):
        """Gets the access_key_id of this DiscoveryConnection.  # noqa: E501

        The AWS credential access key identifier (only used for the AWS connection).  # noqa: E501

        :return: The access_key_id of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this DiscoveryConnection.

        The AWS credential access key identifier (only used for the AWS connection).  # noqa: E501

        :param access_key_id: The access_key_id of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def address(self):
        """Gets the address of this DiscoveryConnection.  # noqa: E501

        ${discovery.connection.address}  # noqa: E501

        :return: The address of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DiscoveryConnection.

        ${discovery.connection.address}  # noqa: E501

        :param address: The address of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def arn(self):
        """Gets the arn of this DiscoveryConnection.  # noqa: E501

        The AWS credential ARN (only used for the AWS connection).  # noqa: E501

        :return: The arn of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DiscoveryConnection.

        The AWS credential ARN (only used for the AWS connection).  # noqa: E501

        :param arn: The arn of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def aws_session_name(self):
        """Gets the aws_session_name of this DiscoveryConnection.  # noqa: E501

        The AWS credential session name (only used for the AWS connection).  # noqa: E501

        :return: The aws_session_name of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._aws_session_name

    @aws_session_name.setter
    def aws_session_name(self, aws_session_name):
        """Sets the aws_session_name of this DiscoveryConnection.

        The AWS credential session name (only used for the AWS connection).  # noqa: E501

        :param aws_session_name: The aws_session_name of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._aws_session_name = aws_session_name

    @property
    def connection_type(self):
        """Gets the connection_type of this DiscoveryConnection.  # noqa: E501

        The type of the discovery connection.  # noqa: E501

        :return: The connection_type of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DiscoveryConnection.

        The type of the discovery connection.  # noqa: E501

        :param connection_type: The connection_type of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def event_source(self):
        """Gets the event_source of this DiscoveryConnection.  # noqa: E501

        The event source type to use.  # noqa: E501

        :return: The event_source of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this DiscoveryConnection.

        The event source type to use.  # noqa: E501

        :param event_source: The event_source of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def exchange_server_hostname(self):
        """Gets the exchange_server_hostname of this DiscoveryConnection.  # noqa: E501

        The hostname of the exchange server to connect to.  # noqa: E501

        :return: The exchange_server_hostname of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._exchange_server_hostname

    @exchange_server_hostname.setter
    def exchange_server_hostname(self, exchange_server_hostname):
        """Sets the exchange_server_hostname of this DiscoveryConnection.

        The hostname of the exchange server to connect to.  # noqa: E501

        :param exchange_server_hostname: The exchange_server_hostname of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._exchange_server_hostname = exchange_server_hostname

    @property
    def exchange_user(self):
        """Gets the exchange_user of this DiscoveryConnection.  # noqa: E501

        The username used to connect to the exchange server.  # noqa: E501

        :return: The exchange_user of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._exchange_user

    @exchange_user.setter
    def exchange_user(self, exchange_user):
        """Sets the exchange_user of this DiscoveryConnection.

        The username used to connect to the exchange server.  # noqa: E501

        :param exchange_user: The exchange_user of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._exchange_user = exchange_user

    @property
    def folder_path(self):
        """Gets the folder_path of this DiscoveryConnection.  # noqa: E501

        The folder path to pull logs from.  # noqa: E501

        :return: The folder_path of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this DiscoveryConnection.

        The folder path to pull logs from.  # noqa: E501

        :param folder_path: The folder_path of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._folder_path = folder_path

    @property
    def id(self):
        """Gets the id of this DiscoveryConnection.  # noqa: E501

        The identifier of the discovery connection.  # noqa: E501

        :return: The id of this DiscoveryConnection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveryConnection.

        The identifier of the discovery connection.  # noqa: E501

        :param id: The id of this DiscoveryConnection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ldap_server(self):
        """Gets the ldap_server of this DiscoveryConnection.  # noqa: E501

        The LDAP server to connect to.  # noqa: E501

        :return: The ldap_server of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._ldap_server

    @ldap_server.setter
    def ldap_server(self, ldap_server):
        """Sets the ldap_server of this DiscoveryConnection.

        The LDAP server to connect to.  # noqa: E501

        :param ldap_server: The ldap_server of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._ldap_server = ldap_server

    @property
    def links(self):
        """Gets the links of this DiscoveryConnection.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this DiscoveryConnection.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DiscoveryConnection.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this DiscoveryConnection.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this DiscoveryConnection.  # noqa: E501

        The discovery connection name.  # noqa: E501

        :return: The name of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveryConnection.

        The discovery connection name.  # noqa: E501

        :param name: The name of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this DiscoveryConnection.  # noqa: E501

        The address used to connect to the discovery connection source.  # noqa: E501

        :return: The port of this DiscoveryConnection.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DiscoveryConnection.

        The address used to connect to the discovery connection source.  # noqa: E501

        :param port: The port of this DiscoveryConnection.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this DiscoveryConnection.  # noqa: E501

        The protocol used to connect to the discovery connection source.  # noqa: E501

        :return: The protocol of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DiscoveryConnection.

        The protocol used to connect to the discovery connection source.  # noqa: E501

        :param protocol: The protocol of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def region(self):
        """Gets the region of this DiscoveryConnection.  # noqa: E501

        The AWS region (only used for the AWS connection).  # noqa: E501

        :return: The region of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DiscoveryConnection.

        The AWS region (only used for the AWS connection).  # noqa: E501

        :param region: The region of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def scan_engine_is_inside_aws(self):
        """Gets the scan_engine_is_inside_aws of this DiscoveryConnection.  # noqa: E501

        Flag denoting whether the scan engine is in AWS, this is used for AWS discovery connections for scanning purposes (only used for the AWS connection).  # noqa: E501

        :return: The scan_engine_is_inside_aws of this DiscoveryConnection.  # noqa: E501
        :rtype: bool
        """
        return self._scan_engine_is_inside_aws

    @scan_engine_is_inside_aws.setter
    def scan_engine_is_inside_aws(self, scan_engine_is_inside_aws):
        """Sets the scan_engine_is_inside_aws of this DiscoveryConnection.

        Flag denoting whether the scan engine is in AWS, this is used for AWS discovery connections for scanning purposes (only used for the AWS connection).  # noqa: E501

        :param scan_engine_is_inside_aws: The scan_engine_is_inside_aws of this DiscoveryConnection.  # noqa: E501
        :type: bool
        """

        self._scan_engine_is_inside_aws = scan_engine_is_inside_aws

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this DiscoveryConnection.  # noqa: E501

        The AWS credential secret access key (only used for the AWS connection).  # noqa: E501

        :return: The secret_access_key of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this DiscoveryConnection.

        The AWS credential secret access key (only used for the AWS connection).  # noqa: E501

        :param secret_access_key: The secret_access_key of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    @property
    def status(self):
        """Gets the status of this DiscoveryConnection.  # noqa: E501

        The status of the discovery connection.  # noqa: E501

        :return: The status of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DiscoveryConnection.

        The status of the discovery connection.  # noqa: E501

        :param status: The status of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def username(self):
        """Gets the username of this DiscoveryConnection.  # noqa: E501

        The username used to authenticate to the discovery connection source.  # noqa: E501

        :return: The username of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DiscoveryConnection.

        The username used to authenticate to the discovery connection source.  # noqa: E501

        :param username: The username of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def win_rm_server(self):
        """Gets the win_rm_server of this DiscoveryConnection.  # noqa: E501

        The WinRM server to connect to.   # noqa: E501

        :return: The win_rm_server of this DiscoveryConnection.  # noqa: E501
        :rtype: str
        """
        return self._win_rm_server

    @win_rm_server.setter
    def win_rm_server(self, win_rm_server):
        """Sets the win_rm_server of this DiscoveryConnection.

        The WinRM server to connect to.   # noqa: E501

        :param win_rm_server: The win_rm_server of this DiscoveryConnection.  # noqa: E501
        :type: str
        """

        self._win_rm_server = win_rm_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveryConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
