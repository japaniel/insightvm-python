# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Info(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'CPUInfo',
        'disk': 'DiskInfo',
        'distinguished_name': 'str',
        'fqdn': 'str',
        'host': 'str',
        'ip': 'str',
        'jvm': 'JVMInfo',
        'links': 'list[Link]',
        'memory': 'MemoryInfo',
        'operating_system': 'str',
        'serial': 'str',
        'superuser': 'bool',
        'user': 'str',
        'version': 'VersionInfo'
    }

    attribute_map = {
        'cpu': 'cpu',
        'disk': 'disk',
        'distinguished_name': 'distinguishedName',
        'fqdn': 'fqdn',
        'host': 'host',
        'ip': 'ip',
        'jvm': 'jvm',
        'links': 'links',
        'memory': 'memory',
        'operating_system': 'operatingSystem',
        'serial': 'serial',
        'superuser': 'superuser',
        'user': 'user',
        'version': 'version'
    }

    def __init__(self, cpu=None, disk=None, distinguished_name=None, fqdn=None, host=None, ip=None, jvm=None, links=None, memory=None, operating_system=None, serial=None, superuser=None, user=None, version=None):  # noqa: E501
        """Info - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._disk = None
        self._distinguished_name = None
        self._fqdn = None
        self._host = None
        self._ip = None
        self._jvm = None
        self._links = None
        self._memory = None
        self._operating_system = None
        self._serial = None
        self._superuser = None
        self._user = None
        self._version = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if disk is not None:
            self.disk = disk
        if distinguished_name is not None:
            self.distinguished_name = distinguished_name
        if fqdn is not None:
            self.fqdn = fqdn
        if host is not None:
            self.host = host
        if ip is not None:
            self.ip = ip
        if jvm is not None:
            self.jvm = jvm
        if links is not None:
            self.links = links
        if memory is not None:
            self.memory = memory
        if operating_system is not None:
            self.operating_system = operating_system
        if serial is not None:
            self.serial = serial
        if superuser is not None:
            self.superuser = superuser
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version

    @property
    def cpu(self):
        """Gets the cpu of this Info.  # noqa: E501


        :return: The cpu of this Info.  # noqa: E501
        :rtype: CPUInfo
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Info.


        :param cpu: The cpu of this Info.  # noqa: E501
        :type: CPUInfo
        """

        self._cpu = cpu

    @property
    def disk(self):
        """Gets the disk of this Info.  # noqa: E501


        :return: The disk of this Info.  # noqa: E501
        :rtype: DiskInfo
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Info.


        :param disk: The disk of this Info.  # noqa: E501
        :type: DiskInfo
        """

        self._disk = disk

    @property
    def distinguished_name(self):
        """Gets the distinguished_name of this Info.  # noqa: E501

        The distinguished name of the console.  # noqa: E501

        :return: The distinguished_name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        """Sets the distinguished_name of this Info.

        The distinguished name of the console.  # noqa: E501

        :param distinguished_name: The distinguished_name of this Info.  # noqa: E501
        :type: str
        """

        self._distinguished_name = distinguished_name

    @property
    def fqdn(self):
        """Gets the fqdn of this Info.  # noqa: E501

        The fully-qualified domain name of the local host the service is running on.  # noqa: E501

        :return: The fqdn of this Info.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this Info.

        The fully-qualified domain name of the local host the service is running on.  # noqa: E501

        :param fqdn: The fqdn of this Info.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def host(self):
        """Gets the host of this Info.  # noqa: E501

        The name of the local host the service is running on.  # noqa: E501

        :return: The host of this Info.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Info.

        The name of the local host the service is running on.  # noqa: E501

        :param host: The host of this Info.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def ip(self):
        """Gets the ip of this Info.  # noqa: E501

        The IP address of the local host the service is running on.  # noqa: E501

        :return: The ip of this Info.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Info.

        The IP address of the local host the service is running on.  # noqa: E501

        :param ip: The ip of this Info.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def jvm(self):
        """Gets the jvm of this Info.  # noqa: E501


        :return: The jvm of this Info.  # noqa: E501
        :rtype: JVMInfo
        """
        return self._jvm

    @jvm.setter
    def jvm(self, jvm):
        """Sets the jvm of this Info.


        :param jvm: The jvm of this Info.  # noqa: E501
        :type: JVMInfo
        """

        self._jvm = jvm

    @property
    def links(self):
        """Gets the links of this Info.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Info.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Info.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Info.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def memory(self):
        """Gets the memory of this Info.  # noqa: E501


        :return: The memory of this Info.  # noqa: E501
        :rtype: MemoryInfo
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Info.


        :param memory: The memory of this Info.  # noqa: E501
        :type: MemoryInfo
        """

        self._memory = memory

    @property
    def operating_system(self):
        """Gets the operating_system of this Info.  # noqa: E501

        The operating system of the host the service is running on.  # noqa: E501

        :return: The operating_system of this Info.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Info.

        The operating system of the host the service is running on.  # noqa: E501

        :param operating_system: The operating_system of this Info.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def serial(self):
        """Gets the serial of this Info.  # noqa: E501

        The serial number of the console.  # noqa: E501

        :return: The serial of this Info.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Info.

        The serial number of the console.  # noqa: E501

        :param serial: The serial of this Info.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def superuser(self):
        """Gets the superuser of this Info.  # noqa: E501

        Whether the service is running a super-user.  # noqa: E501

        :return: The superuser of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._superuser

    @superuser.setter
    def superuser(self, superuser):
        """Sets the superuser of this Info.

        Whether the service is running a super-user.  # noqa: E501

        :param superuser: The superuser of this Info.  # noqa: E501
        :type: bool
        """

        self._superuser = superuser

    @property
    def user(self):
        """Gets the user of this Info.  # noqa: E501

        The user running the service.  # noqa: E501

        :return: The user of this Info.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Info.

        The user running the service.  # noqa: E501

        :param user: The user of this Info.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this Info.  # noqa: E501


        :return: The version of this Info.  # noqa: E501
        :rtype: VersionInfo
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Info.


        :param version: The version of this Info.  # noqa: E501
        :type: VersionInfo
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Info, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
