# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[Address]',
        'assessed_for_policies': 'bool',
        'assessed_for_vulnerabilities': 'bool',
        'configurations': 'list[Configuration]',
        'databases': 'list[Database]',
        'files': 'list[File]',
        'history': 'list[AssetHistory]',
        'host_name': 'str',
        'host_names': 'list[HostName]',
        'id': 'int',
        'ids': 'list[UniqueId]',
        'ip': 'str',
        'links': 'list[Link]',
        'mac': 'str',
        'os': 'str',
        'os_fingerprint': 'OperatingSystem',
        'raw_risk_score': 'float',
        'risk_score': 'float',
        'services': 'list[Service]',
        'software': 'list[Software]',
        'type': 'str',
        'user_groups': 'list[GroupAccount]',
        'users': 'list[UserAccount]',
        'vulnerabilities': 'AssetVulnerabilities'
    }

    attribute_map = {
        'addresses': 'addresses',
        'assessed_for_policies': 'assessedForPolicies',
        'assessed_for_vulnerabilities': 'assessedForVulnerabilities',
        'configurations': 'configurations',
        'databases': 'databases',
        'files': 'files',
        'history': 'history',
        'host_name': 'hostName',
        'host_names': 'hostNames',
        'id': 'id',
        'ids': 'ids',
        'ip': 'ip',
        'links': 'links',
        'mac': 'mac',
        'os': 'os',
        'os_fingerprint': 'osFingerprint',
        'raw_risk_score': 'rawRiskScore',
        'risk_score': 'riskScore',
        'services': 'services',
        'software': 'software',
        'type': 'type',
        'user_groups': 'userGroups',
        'users': 'users',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, addresses=None, assessed_for_policies=None, assessed_for_vulnerabilities=None, configurations=None, databases=None, files=None, history=None, host_name=None, host_names=None, id=None, ids=None, ip=None, links=None, mac=None, os=None, os_fingerprint=None, raw_risk_score=None, risk_score=None, services=None, software=None, type=None, user_groups=None, users=None, vulnerabilities=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501
        self._addresses = None
        self._assessed_for_policies = None
        self._assessed_for_vulnerabilities = None
        self._configurations = None
        self._databases = None
        self._files = None
        self._history = None
        self._host_name = None
        self._host_names = None
        self._id = None
        self._ids = None
        self._ip = None
        self._links = None
        self._mac = None
        self._os = None
        self._os_fingerprint = None
        self._raw_risk_score = None
        self._risk_score = None
        self._services = None
        self._software = None
        self._type = None
        self._user_groups = None
        self._users = None
        self._vulnerabilities = None
        self.discriminator = None
        if addresses is not None:
            self.addresses = addresses
        if assessed_for_policies is not None:
            self.assessed_for_policies = assessed_for_policies
        if assessed_for_vulnerabilities is not None:
            self.assessed_for_vulnerabilities = assessed_for_vulnerabilities
        if configurations is not None:
            self.configurations = configurations
        if databases is not None:
            self.databases = databases
        if files is not None:
            self.files = files
        if history is not None:
            self.history = history
        if host_name is not None:
            self.host_name = host_name
        if host_names is not None:
            self.host_names = host_names
        if id is not None:
            self.id = id
        if ids is not None:
            self.ids = ids
        if ip is not None:
            self.ip = ip
        if links is not None:
            self.links = links
        if mac is not None:
            self.mac = mac
        if os is not None:
            self.os = os
        if os_fingerprint is not None:
            self.os_fingerprint = os_fingerprint
        if raw_risk_score is not None:
            self.raw_risk_score = raw_risk_score
        if risk_score is not None:
            self.risk_score = risk_score
        if services is not None:
            self.services = services
        if software is not None:
            self.software = software
        if type is not None:
            self.type = type
        if user_groups is not None:
            self.user_groups = user_groups
        if users is not None:
            self.users = users
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def addresses(self):
        """Gets the addresses of this Asset.  # noqa: E501

        All addresses discovered on the asset.  # noqa: E501

        :return: The addresses of this Asset.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Asset.

        All addresses discovered on the asset.  # noqa: E501

        :param addresses: The addresses of this Asset.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def assessed_for_policies(self):
        """Gets the assessed_for_policies of this Asset.  # noqa: E501

        Whether the asset has been assessed for policies at least once.  # noqa: E501

        :return: The assessed_for_policies of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._assessed_for_policies

    @assessed_for_policies.setter
    def assessed_for_policies(self, assessed_for_policies):
        """Sets the assessed_for_policies of this Asset.

        Whether the asset has been assessed for policies at least once.  # noqa: E501

        :param assessed_for_policies: The assessed_for_policies of this Asset.  # noqa: E501
        :type: bool
        """

        self._assessed_for_policies = assessed_for_policies

    @property
    def assessed_for_vulnerabilities(self):
        """Gets the assessed_for_vulnerabilities of this Asset.  # noqa: E501

        Whether the asset has been assessed for vulnerabilities at least once.  # noqa: E501

        :return: The assessed_for_vulnerabilities of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._assessed_for_vulnerabilities

    @assessed_for_vulnerabilities.setter
    def assessed_for_vulnerabilities(self, assessed_for_vulnerabilities):
        """Sets the assessed_for_vulnerabilities of this Asset.

        Whether the asset has been assessed for vulnerabilities at least once.  # noqa: E501

        :param assessed_for_vulnerabilities: The assessed_for_vulnerabilities of this Asset.  # noqa: E501
        :type: bool
        """

        self._assessed_for_vulnerabilities = assessed_for_vulnerabilities

    @property
    def configurations(self):
        """Gets the configurations of this Asset.  # noqa: E501

        Configuration key-values pairs enumerated on the asset.  # noqa: E501

        :return: The configurations of this Asset.  # noqa: E501
        :rtype: list[Configuration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this Asset.

        Configuration key-values pairs enumerated on the asset.  # noqa: E501

        :param configurations: The configurations of this Asset.  # noqa: E501
        :type: list[Configuration]
        """

        self._configurations = configurations

    @property
    def databases(self):
        """Gets the databases of this Asset.  # noqa: E501

        The databases enumerated on the asset.  # noqa: E501

        :return: The databases of this Asset.  # noqa: E501
        :rtype: list[Database]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this Asset.

        The databases enumerated on the asset.  # noqa: E501

        :param databases: The databases of this Asset.  # noqa: E501
        :type: list[Database]
        """

        self._databases = databases

    @property
    def files(self):
        """Gets the files of this Asset.  # noqa: E501

        The files discovered with searching on the asset.  # noqa: E501

        :return: The files of this Asset.  # noqa: E501
        :rtype: list[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Asset.

        The files discovered with searching on the asset.  # noqa: E501

        :param files: The files of this Asset.  # noqa: E501
        :type: list[File]
        """

        self._files = files

    @property
    def history(self):
        """Gets the history of this Asset.  # noqa: E501

        The history of changes to the asset over time.  # noqa: E501

        :return: The history of this Asset.  # noqa: E501
        :rtype: list[AssetHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Asset.

        The history of changes to the asset over time.  # noqa: E501

        :param history: The history of this Asset.  # noqa: E501
        :type: list[AssetHistory]
        """

        self._history = history

    @property
    def host_name(self):
        """Gets the host_name of this Asset.  # noqa: E501

        The primary host name (local or FQDN) of the asset.  # noqa: E501

        :return: The host_name of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Asset.

        The primary host name (local or FQDN) of the asset.  # noqa: E501

        :param host_name: The host_name of this Asset.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def host_names(self):
        """Gets the host_names of this Asset.  # noqa: E501

        All host names or aliases discovered on the asset.  # noqa: E501

        :return: The host_names of this Asset.  # noqa: E501
        :rtype: list[HostName]
        """
        return self._host_names

    @host_names.setter
    def host_names(self, host_names):
        """Sets the host_names of this Asset.

        All host names or aliases discovered on the asset.  # noqa: E501

        :param host_names: The host_names of this Asset.  # noqa: E501
        :type: list[HostName]
        """

        self._host_names = host_names

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501

        The identifier of the asset.  # noqa: E501

        :return: The id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        The identifier of the asset.  # noqa: E501

        :param id: The id of this Asset.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ids(self):
        """Gets the ids of this Asset.  # noqa: E501

        Unique identifiers found on the asset, such as hardware or operating system identifiers.  # noqa: E501

        :return: The ids of this Asset.  # noqa: E501
        :rtype: list[UniqueId]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Asset.

        Unique identifiers found on the asset, such as hardware or operating system identifiers.  # noqa: E501

        :param ids: The ids of this Asset.  # noqa: E501
        :type: list[UniqueId]
        """

        self._ids = ids

    @property
    def ip(self):
        """Gets the ip of this Asset.  # noqa: E501

        The primary IPv4 or IPv6 address of the asset.  # noqa: E501

        :return: The ip of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Asset.

        The primary IPv4 or IPv6 address of the asset.  # noqa: E501

        :param ip: The ip of this Asset.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def links(self):
        """Gets the links of this Asset.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Asset.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Asset.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Asset.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def mac(self):
        """Gets the mac of this Asset.  # noqa: E501

        The primary Media Access Control (MAC) address of the asset. The format is six groups of two hexadecimal digits separated by colons.  # noqa: E501

        :return: The mac of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this Asset.

        The primary Media Access Control (MAC) address of the asset. The format is six groups of two hexadecimal digits separated by colons.  # noqa: E501

        :param mac: The mac of this Asset.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def os(self):
        """Gets the os of this Asset.  # noqa: E501

        The full description of the operating system of the asset.  # noqa: E501

        :return: The os of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Asset.

        The full description of the operating system of the asset.  # noqa: E501

        :param os: The os of this Asset.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def os_fingerprint(self):
        """Gets the os_fingerprint of this Asset.  # noqa: E501


        :return: The os_fingerprint of this Asset.  # noqa: E501
        :rtype: OperatingSystem
        """
        return self._os_fingerprint

    @os_fingerprint.setter
    def os_fingerprint(self, os_fingerprint):
        """Sets the os_fingerprint of this Asset.


        :param os_fingerprint: The os_fingerprint of this Asset.  # noqa: E501
        :type: OperatingSystem
        """

        self._os_fingerprint = os_fingerprint

    @property
    def raw_risk_score(self):
        """Gets the raw_risk_score of this Asset.  # noqa: E501

        The base risk score of the asset.  # noqa: E501

        :return: The raw_risk_score of this Asset.  # noqa: E501
        :rtype: float
        """
        return self._raw_risk_score

    @raw_risk_score.setter
    def raw_risk_score(self, raw_risk_score):
        """Sets the raw_risk_score of this Asset.

        The base risk score of the asset.  # noqa: E501

        :param raw_risk_score: The raw_risk_score of this Asset.  # noqa: E501
        :type: float
        """

        self._raw_risk_score = raw_risk_score

    @property
    def risk_score(self):
        """Gets the risk_score of this Asset.  # noqa: E501

        The risk score (with criticality adjustments) of the asset.  # noqa: E501

        :return: The risk_score of this Asset.  # noqa: E501
        :rtype: float
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this Asset.

        The risk score (with criticality adjustments) of the asset.  # noqa: E501

        :param risk_score: The risk_score of this Asset.  # noqa: E501
        :type: float
        """

        self._risk_score = risk_score

    @property
    def services(self):
        """Gets the services of this Asset.  # noqa: E501

        The services discovered on the asset.  # noqa: E501

        :return: The services of this Asset.  # noqa: E501
        :rtype: list[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Asset.

        The services discovered on the asset.  # noqa: E501

        :param services: The services of this Asset.  # noqa: E501
        :type: list[Service]
        """

        self._services = services

    @property
    def software(self):
        """Gets the software of this Asset.  # noqa: E501

        The software discovered on the asset.  # noqa: E501

        :return: The software of this Asset.  # noqa: E501
        :rtype: list[Software]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this Asset.

        The software discovered on the asset.  # noqa: E501

        :param software: The software of this Asset.  # noqa: E501
        :type: list[Software]
        """

        self._software = software

    @property
    def type(self):
        """Gets the type of this Asset.  # noqa: E501

        The type of asset.  # noqa: E501

        :return: The type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Asset.

        The type of asset.  # noqa: E501

        :param type: The type of this Asset.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "guest", "hypervisor", "physical", "mobile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_groups(self):
        """Gets the user_groups of this Asset.  # noqa: E501

        The group accounts enumerated on the asset.  # noqa: E501

        :return: The user_groups of this Asset.  # noqa: E501
        :rtype: list[GroupAccount]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this Asset.

        The group accounts enumerated on the asset.  # noqa: E501

        :param user_groups: The user_groups of this Asset.  # noqa: E501
        :type: list[GroupAccount]
        """

        self._user_groups = user_groups

    @property
    def users(self):
        """Gets the users of this Asset.  # noqa: E501

        The user accounts enumerated on the asset.  # noqa: E501

        :return: The users of this Asset.  # noqa: E501
        :rtype: list[UserAccount]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Asset.

        The user accounts enumerated on the asset.  # noqa: E501

        :param users: The users of this Asset.  # noqa: E501
        :type: list[UserAccount]
        """

        self._users = users

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this Asset.  # noqa: E501


        :return: The vulnerabilities of this Asset.  # noqa: E501
        :rtype: AssetVulnerabilities
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this Asset.


        :param vulnerabilities: The vulnerabilities of this Asset.  # noqa: E501
        :type: AssetVulnerabilities
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Asset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
