# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'supported_operators': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'supported_operators': 'supportedOperators',
        'type': 'type'
    }

    def __init__(self, field_name=None, supported_operators=None, type=None):  # noqa: E501
        """IMetaData - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._supported_operators = None
        self._type = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if supported_operators is not None:
            self.supported_operators = supported_operators
        if type is not None:
            self.type = type

    @property
    def field_name(self):
        """Gets the field_name of this IMetaData.  # noqa: E501


        :return: The field_name of this IMetaData.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this IMetaData.


        :param field_name: The field_name of this IMetaData.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def supported_operators(self):
        """Gets the supported_operators of this IMetaData.  # noqa: E501


        :return: The supported_operators of this IMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_operators

    @supported_operators.setter
    def supported_operators(self, supported_operators):
        """Sets the supported_operators of this IMetaData.


        :param supported_operators: The supported_operators of this IMetaData.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IS", "IS_NOT", "IS_APPLIED", "IS_NOT_APPLIED", "IN", "NOT_IN", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "NOT_CONTAINS", "LESS_THAN", "GREATER_THAN", "IN_RANGE", "NOT_IN_RANGE", "INCLUDE", "DO_NOT_INCLUDE", "ON_OR_BEFORE", "ON_OR_AFTER", "BETWEEN", "EARLIER_THAN", "WITHIN_THE_LAST", "IS_EMPTY", "IS_NOT_EMPTY", "ARE", "LIKE", "NOT_LIKE"]  # noqa: E501
        if not set(supported_operators).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_operators` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_operators) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_operators = supported_operators

    @property
    def type(self):
        """Gets the type of this IMetaData.  # noqa: E501


        :return: The type of this IMetaData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IMetaData.


        :param type: The type of this IMetaData.  # noqa: E501
        :type: str
        """
        allowed_values = ["NUMERIC", "STRING", "SET", "SET_STRING", "SINGLE", "DATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
