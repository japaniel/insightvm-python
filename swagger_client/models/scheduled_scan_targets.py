# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledScanTargets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'excluded_asset_groups': 'ExcludedAssetGroups',
        'excluded_targets': 'ExcludedScanTargets',
        'included_asset_groups': 'IncludedAssetGroups',
        'included_targets': 'IncludedScanTargets'
    }

    attribute_map = {
        'excluded_asset_groups': 'excludedAssetGroups',
        'excluded_targets': 'excludedTargets',
        'included_asset_groups': 'includedAssetGroups',
        'included_targets': 'includedTargets'
    }

    def __init__(self, excluded_asset_groups=None, excluded_targets=None, included_asset_groups=None, included_targets=None):  # noqa: E501
        """ScheduledScanTargets - a model defined in Swagger"""  # noqa: E501
        self._excluded_asset_groups = None
        self._excluded_targets = None
        self._included_asset_groups = None
        self._included_targets = None
        self.discriminator = None
        if excluded_asset_groups is not None:
            self.excluded_asset_groups = excluded_asset_groups
        if excluded_targets is not None:
            self.excluded_targets = excluded_targets
        if included_asset_groups is not None:
            self.included_asset_groups = included_asset_groups
        if included_targets is not None:
            self.included_targets = included_targets

    @property
    def excluded_asset_groups(self):
        """Gets the excluded_asset_groups of this ScheduledScanTargets.  # noqa: E501


        :return: The excluded_asset_groups of this ScheduledScanTargets.  # noqa: E501
        :rtype: ExcludedAssetGroups
        """
        return self._excluded_asset_groups

    @excluded_asset_groups.setter
    def excluded_asset_groups(self, excluded_asset_groups):
        """Sets the excluded_asset_groups of this ScheduledScanTargets.


        :param excluded_asset_groups: The excluded_asset_groups of this ScheduledScanTargets.  # noqa: E501
        :type: ExcludedAssetGroups
        """

        self._excluded_asset_groups = excluded_asset_groups

    @property
    def excluded_targets(self):
        """Gets the excluded_targets of this ScheduledScanTargets.  # noqa: E501


        :return: The excluded_targets of this ScheduledScanTargets.  # noqa: E501
        :rtype: ExcludedScanTargets
        """
        return self._excluded_targets

    @excluded_targets.setter
    def excluded_targets(self, excluded_targets):
        """Sets the excluded_targets of this ScheduledScanTargets.


        :param excluded_targets: The excluded_targets of this ScheduledScanTargets.  # noqa: E501
        :type: ExcludedScanTargets
        """

        self._excluded_targets = excluded_targets

    @property
    def included_asset_groups(self):
        """Gets the included_asset_groups of this ScheduledScanTargets.  # noqa: E501


        :return: The included_asset_groups of this ScheduledScanTargets.  # noqa: E501
        :rtype: IncludedAssetGroups
        """
        return self._included_asset_groups

    @included_asset_groups.setter
    def included_asset_groups(self, included_asset_groups):
        """Sets the included_asset_groups of this ScheduledScanTargets.


        :param included_asset_groups: The included_asset_groups of this ScheduledScanTargets.  # noqa: E501
        :type: IncludedAssetGroups
        """

        self._included_asset_groups = included_asset_groups

    @property
    def included_targets(self):
        """Gets the included_targets of this ScheduledScanTargets.  # noqa: E501


        :return: The included_targets of this ScheduledScanTargets.  # noqa: E501
        :rtype: IncludedScanTargets
        """
        return self._included_targets

    @included_targets.setter
    def included_targets(self, included_targets):
        """Sets the included_targets of this ScheduledScanTargets.


        :param included_targets: The included_targets of this ScheduledScanTargets.  # noqa: E501
        :type: IncludedScanTargets
        """

        self._included_targets = included_targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledScanTargets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledScanTargets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
