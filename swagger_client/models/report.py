# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bureau': 'str',
        'component': 'str',
        'database': 'ReportConfigDatabaseResource',
        'email': 'ReportEmail',
        'enclave': 'str',
        'filters': 'ReportConfigFiltersResource',
        'format': 'str',
        'frequency': 'ReportFrequency',
        'id': 'int',
        'language': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'organization': 'str',
        'owner': 'int',
        'policy': 'int',
        'query': 'str',
        'scope': 'ReportConfigScopeResource',
        'storage': 'ReportStorage',
        'template': 'str',
        'timezone': 'str',
        'users': 'list[int]',
        'version': 'str'
    }

    attribute_map = {
        'bureau': 'bureau',
        'component': 'component',
        'database': 'database',
        'email': 'email',
        'enclave': 'enclave',
        'filters': 'filters',
        'format': 'format',
        'frequency': 'frequency',
        'id': 'id',
        'language': 'language',
        'links': 'links',
        'name': 'name',
        'organization': 'organization',
        'owner': 'owner',
        'policy': 'policy',
        'query': 'query',
        'scope': 'scope',
        'storage': 'storage',
        'template': 'template',
        'timezone': 'timezone',
        'users': 'users',
        'version': 'version'
    }

    def __init__(self, bureau=None, component=None, database=None, email=None, enclave=None, filters=None, format=None, frequency=None, id=None, language=None, links=None, name=None, organization=None, owner=None, policy=None, query=None, scope=None, storage=None, template=None, timezone=None, users=None, version=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        self._bureau = None
        self._component = None
        self._database = None
        self._email = None
        self._enclave = None
        self._filters = None
        self._format = None
        self._frequency = None
        self._id = None
        self._language = None
        self._links = None
        self._name = None
        self._organization = None
        self._owner = None
        self._policy = None
        self._query = None
        self._scope = None
        self._storage = None
        self._template = None
        self._timezone = None
        self._users = None
        self._version = None
        self.discriminator = None
        if bureau is not None:
            self.bureau = bureau
        if component is not None:
            self.component = component
        if database is not None:
            self.database = database
        if email is not None:
            self.email = email
        if enclave is not None:
            self.enclave = enclave
        if filters is not None:
            self.filters = filters
        if format is not None:
            self.format = format
        if frequency is not None:
            self.frequency = frequency
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if owner is not None:
            self.owner = owner
        if policy is not None:
            self.policy = policy
        if query is not None:
            self.query = query
        if scope is not None:
            self.scope = scope
        if storage is not None:
            self.storage = storage
        if template is not None:
            self.template = template
        if timezone is not None:
            self.timezone = timezone
        if users is not None:
            self.users = users
        if version is not None:
            self.version = version

    @property
    def bureau(self):
        """Gets the bureau of this Report.  # noqa: E501

        The name of the bureau for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The bureau of this Report.  # noqa: E501
        :rtype: str
        """
        return self._bureau

    @bureau.setter
    def bureau(self, bureau):
        """Sets the bureau of this Report.

        The name of the bureau for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param bureau: The bureau of this Report.  # noqa: E501
        :type: str
        """

        self._bureau = bureau

    @property
    def component(self):
        """Gets the component of this Report.  # noqa: E501

        The name of the component for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The component of this Report.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Report.

        The name of the component for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param component: The component of this Report.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def database(self):
        """Gets the database of this Report.  # noqa: E501


        :return: The database of this Report.  # noqa: E501
        :rtype: ReportConfigDatabaseResource
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this Report.


        :param database: The database of this Report.  # noqa: E501
        :type: ReportConfigDatabaseResource
        """

        self._database = database

    @property
    def email(self):
        """Gets the email of this Report.  # noqa: E501


        :return: The email of this Report.  # noqa: E501
        :rtype: ReportEmail
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Report.


        :param email: The email of this Report.  # noqa: E501
        :type: ReportEmail
        """

        self._email = email

    @property
    def enclave(self):
        """Gets the enclave of this Report.  # noqa: E501

        The name of the enclave for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The enclave of this Report.  # noqa: E501
        :rtype: str
        """
        return self._enclave

    @enclave.setter
    def enclave(self, enclave):
        """Sets the enclave of this Report.

        The name of the enclave for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param enclave: The enclave of this Report.  # noqa: E501
        :type: str
        """

        self._enclave = enclave

    @property
    def filters(self):
        """Gets the filters of this Report.  # noqa: E501


        :return: The filters of this Report.  # noqa: E501
        :rtype: ReportConfigFiltersResource
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Report.


        :param filters: The filters of this Report.  # noqa: E501
        :type: ReportConfigFiltersResource
        """

        self._filters = filters

    @property
    def format(self):
        """Gets the format of this Report.  # noqa: E501

        The output format of the report. The format will restrict the available templates and parameters that can be specified.  # noqa: E501

        :return: The format of this Report.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Report.

        The output format of the report. The format will restrict the available templates and parameters that can be specified.  # noqa: E501

        :param format: The format of this Report.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def frequency(self):
        """Gets the frequency of this Report.  # noqa: E501


        :return: The frequency of this Report.  # noqa: E501
        :rtype: ReportFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Report.


        :param frequency: The frequency of this Report.  # noqa: E501
        :type: ReportFrequency
        """

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501

        The identifier of the report.  # noqa: E501

        :return: The id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        The identifier of the report.  # noqa: E501

        :param id: The id of this Report.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Report.  # noqa: E501

        The locale (language) in which the report is generated  # noqa: E501

        :return: The language of this Report.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Report.

        The locale (language) in which the report is generated  # noqa: E501

        :param language: The language of this Report.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this Report.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Report.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Report.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Report.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Report.  # noqa: E501

        The name of the report.  # noqa: E501

        :return: The name of this Report.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        The name of the report.  # noqa: E501

        :param name: The name of this Report.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Report.  # noqa: E501

        The organization used for a XCCDF XML report. Only used when the format is `\"xccdf-xml\"`.  # noqa: E501

        :return: The organization of this Report.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Report.

        The organization used for a XCCDF XML report. Only used when the format is `\"xccdf-xml\"`.  # noqa: E501

        :param organization: The organization of this Report.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def owner(self):
        """Gets the owner of this Report.  # noqa: E501

        The identifier of the report owner.  # noqa: E501

        :return: The owner of this Report.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Report.

        The identifier of the report owner.  # noqa: E501

        :param owner: The owner of this Report.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def policy(self):
        """Gets the policy of this Report.  # noqa: E501

        The policy to report on. Only used when the format is `\"oval-xml\"`, `\"\"xccdf-csv\"`, or `\"xccdf-xml\"`.  # noqa: E501

        :return: The policy of this Report.  # noqa: E501
        :rtype: int
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Report.

        The policy to report on. Only used when the format is `\"oval-xml\"`, `\"\"xccdf-csv\"`, or `\"xccdf-xml\"`.  # noqa: E501

        :param policy: The policy of this Report.  # noqa: E501
        :type: int
        """

        self._policy = policy

    @property
    def query(self):
        """Gets the query of this Report.  # noqa: E501

        SQL query to run against the Reporting Data Model. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :return: The query of this Report.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Report.

        SQL query to run against the Reporting Data Model. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :param query: The query of this Report.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def scope(self):
        """Gets the scope of this Report.  # noqa: E501


        :return: The scope of this Report.  # noqa: E501
        :rtype: ReportConfigScopeResource
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Report.


        :param scope: The scope of this Report.  # noqa: E501
        :type: ReportConfigScopeResource
        """

        self._scope = scope

    @property
    def storage(self):
        """Gets the storage of this Report.  # noqa: E501


        :return: The storage of this Report.  # noqa: E501
        :rtype: ReportStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Report.


        :param storage: The storage of this Report.  # noqa: E501
        :type: ReportStorage
        """

        self._storage = storage

    @property
    def template(self):
        """Gets the template of this Report.  # noqa: E501

        The template for the report (only required if the format is templatized).  # noqa: E501

        :return: The template of this Report.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Report.

        The template for the report (only required if the format is templatized).  # noqa: E501

        :param template: The template of this Report.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def timezone(self):
        """Gets the timezone of this Report.  # noqa: E501

        The timezone the report generates in, such as `\"America/Los_Angeles\"`.  # noqa: E501

        :return: The timezone of this Report.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Report.

        The timezone the report generates in, such as `\"America/Los_Angeles\"`.  # noqa: E501

        :param timezone: The timezone of this Report.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def users(self):
        """Gets the users of this Report.  # noqa: E501

        The identifiers of the users granted explicit access to the report.  # noqa: E501

        :return: The users of this Report.  # noqa: E501
        :rtype: list[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Report.

        The identifiers of the users granted explicit access to the report.  # noqa: E501

        :param users: The users of this Report.  # noqa: E501
        :type: list[int]
        """

        self._users = users

    @property
    def version(self):
        """Gets the version of this Report.  # noqa: E501

        The version of the report Data Model to report against. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :return: The version of this Report.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Report.

        The version of the report Data Model to report against. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :param version: The version of this Report.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
