# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicensePolicyScanningBenchmarks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cis': 'bool',
        'custom': 'bool',
        'disa': 'bool',
        'fdcc': 'bool',
        'usgcb': 'bool'
    }

    attribute_map = {
        'cis': 'cis',
        'custom': 'custom',
        'disa': 'disa',
        'fdcc': 'fdcc',
        'usgcb': 'usgcb'
    }

    def __init__(self, cis=None, custom=None, disa=None, fdcc=None, usgcb=None):  # noqa: E501
        """LicensePolicyScanningBenchmarks - a model defined in Swagger"""  # noqa: E501
        self._cis = None
        self._custom = None
        self._disa = None
        self._fdcc = None
        self._usgcb = None
        self.discriminator = None
        if cis is not None:
            self.cis = cis
        if custom is not None:
            self.custom = custom
        if disa is not None:
            self.disa = disa
        if fdcc is not None:
            self.fdcc = fdcc
        if usgcb is not None:
            self.usgcb = usgcb

    @property
    def cis(self):
        """Gets the cis of this LicensePolicyScanningBenchmarks.  # noqa: E501

        Whether policy scanning for CIS benchmarks is allowed.  # noqa: E501

        :return: The cis of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :rtype: bool
        """
        return self._cis

    @cis.setter
    def cis(self, cis):
        """Sets the cis of this LicensePolicyScanningBenchmarks.

        Whether policy scanning for CIS benchmarks is allowed.  # noqa: E501

        :param cis: The cis of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :type: bool
        """

        self._cis = cis

    @property
    def custom(self):
        """Gets the custom of this LicensePolicyScanningBenchmarks.  # noqa: E501

        Whether custom benchmarks can be used during scanning.  # noqa: E501

        :return: The custom of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this LicensePolicyScanningBenchmarks.

        Whether custom benchmarks can be used during scanning.  # noqa: E501

        :param custom: The custom of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def disa(self):
        """Gets the disa of this LicensePolicyScanningBenchmarks.  # noqa: E501

        Whether policy scanning for DISA benchmarks is allowed.  # noqa: E501

        :return: The disa of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :rtype: bool
        """
        return self._disa

    @disa.setter
    def disa(self, disa):
        """Sets the disa of this LicensePolicyScanningBenchmarks.

        Whether policy scanning for DISA benchmarks is allowed.  # noqa: E501

        :param disa: The disa of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :type: bool
        """

        self._disa = disa

    @property
    def fdcc(self):
        """Gets the fdcc of this LicensePolicyScanningBenchmarks.  # noqa: E501

        Whether policy scanning for FDCC benchmarks is allowed.  # noqa: E501

        :return: The fdcc of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :rtype: bool
        """
        return self._fdcc

    @fdcc.setter
    def fdcc(self, fdcc):
        """Sets the fdcc of this LicensePolicyScanningBenchmarks.

        Whether policy scanning for FDCC benchmarks is allowed.  # noqa: E501

        :param fdcc: The fdcc of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :type: bool
        """

        self._fdcc = fdcc

    @property
    def usgcb(self):
        """Gets the usgcb of this LicensePolicyScanningBenchmarks.  # noqa: E501

        Whether policy scanning for USGCB benchmarks is allowed.  # noqa: E501

        :return: The usgcb of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :rtype: bool
        """
        return self._usgcb

    @usgcb.setter
    def usgcb(self, usgcb):
        """Sets the usgcb of this LicensePolicyScanningBenchmarks.

        Whether policy scanning for USGCB benchmarks is allowed.  # noqa: E501

        :param usgcb: The usgcb of this LicensePolicyScanningBenchmarks.  # noqa: E501
        :type: bool
        """

        self._usgcb = usgcb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicensePolicyScanningBenchmarks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicensePolicyScanningBenchmarks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
