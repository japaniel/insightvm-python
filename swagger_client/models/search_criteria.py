# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[SwaggerSearchCriteriaFilter]',
        'match': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'match': 'match'
    }

    def __init__(self, filters=None, match=None):  # noqa: E501
        """SearchCriteria - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._match = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if match is not None:
            self.match = match

    @property
    def filters(self):
        """Gets the filters of this SearchCriteria.  # noqa: E501

        Filters used to match assets. See <a href=\"#section/Responses/SearchCriteria\">Search Criteria</a> for more information on the structure and format.  # noqa: E501

        :return: The filters of this SearchCriteria.  # noqa: E501
        :rtype: list[SwaggerSearchCriteriaFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchCriteria.

        Filters used to match assets. See <a href=\"#section/Responses/SearchCriteria\">Search Criteria</a> for more information on the structure and format.  # noqa: E501

        :param filters: The filters of this SearchCriteria.  # noqa: E501
        :type: list[SwaggerSearchCriteriaFilter]
        """

        self._filters = filters

    @property
    def match(self):
        """Gets the match of this SearchCriteria.  # noqa: E501

        Operator to determine how to match filters. `all` requires that all filters match for an asset to be included. `any` requires only one filter to match for an asset to be included.  # noqa: E501

        :return: The match of this SearchCriteria.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this SearchCriteria.

        Operator to determine how to match filters. `all` requires that all filters match for an asset to be included. `any` requires only one filter to match for an asset to be included.  # noqa: E501

        :param match: The match of this SearchCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "all"]  # noqa: E501
        if match not in allowed_values:
            raise ValueError(
                "Invalid value for `match` ({0}), must be one of {1}"  # noqa: E501
                .format(match, allowed_values)
            )

        self._match = match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
