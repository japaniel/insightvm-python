# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VulnerabilityCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'links': 'list[Link]',
        'plugin': 'str',
        'potential': 'bool',
        'requires_credentials': 'bool',
        'safe': 'bool',
        'service': 'bool',
        'unique': 'bool',
        'vulnerability': 'str'
    }

    attribute_map = {
        'id': 'id',
        'links': 'links',
        'plugin': 'plugin',
        'potential': 'potential',
        'requires_credentials': 'requiresCredentials',
        'safe': 'safe',
        'service': 'service',
        'unique': 'unique',
        'vulnerability': 'vulnerability'
    }

    def __init__(self, id=None, links=None, plugin=None, potential=None, requires_credentials=None, safe=None, service=None, unique=None, vulnerability=None):  # noqa: E501
        """VulnerabilityCheck - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._links = None
        self._plugin = None
        self._potential = None
        self._requires_credentials = None
        self._safe = None
        self._service = None
        self._unique = None
        self._vulnerability = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if plugin is not None:
            self.plugin = plugin
        if potential is not None:
            self.potential = potential
        if requires_credentials is not None:
            self.requires_credentials = requires_credentials
        if safe is not None:
            self.safe = safe
        if service is not None:
            self.service = service
        if unique is not None:
            self.unique = unique
        if vulnerability is not None:
            self.vulnerability = vulnerability

    @property
    def id(self):
        """Gets the id of this VulnerabilityCheck.  # noqa: E501

        The identifier of the vulnerability check.  # noqa: E501

        :return: The id of this VulnerabilityCheck.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VulnerabilityCheck.

        The identifier of the vulnerability check.  # noqa: E501

        :param id: The id of this VulnerabilityCheck.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this VulnerabilityCheck.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this VulnerabilityCheck.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VulnerabilityCheck.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this VulnerabilityCheck.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def plugin(self):
        """Gets the plugin of this VulnerabilityCheck.  # noqa: E501

        The name of the plugin (module) the check belongs to.  # noqa: E501

        :return: The plugin of this VulnerabilityCheck.  # noqa: E501
        :rtype: str
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this VulnerabilityCheck.

        The name of the plugin (module) the check belongs to.  # noqa: E501

        :param plugin: The plugin of this VulnerabilityCheck.  # noqa: E501
        :type: str
        """

        self._plugin = plugin

    @property
    def potential(self):
        """Gets the potential of this VulnerabilityCheck.  # noqa: E501

        Whether the check results in potential vulnerabilities.  # noqa: E501

        :return: The potential of this VulnerabilityCheck.  # noqa: E501
        :rtype: bool
        """
        return self._potential

    @potential.setter
    def potential(self, potential):
        """Sets the potential of this VulnerabilityCheck.

        Whether the check results in potential vulnerabilities.  # noqa: E501

        :param potential: The potential of this VulnerabilityCheck.  # noqa: E501
        :type: bool
        """

        self._potential = potential

    @property
    def requires_credentials(self):
        """Gets the requires_credentials of this VulnerabilityCheck.  # noqa: E501

        Whether the check requires credentials in order to run.  # noqa: E501

        :return: The requires_credentials of this VulnerabilityCheck.  # noqa: E501
        :rtype: bool
        """
        return self._requires_credentials

    @requires_credentials.setter
    def requires_credentials(self, requires_credentials):
        """Sets the requires_credentials of this VulnerabilityCheck.

        Whether the check requires credentials in order to run.  # noqa: E501

        :param requires_credentials: The requires_credentials of this VulnerabilityCheck.  # noqa: E501
        :type: bool
        """

        self._requires_credentials = requires_credentials

    @property
    def safe(self):
        """Gets the safe of this VulnerabilityCheck.  # noqa: E501

        Whether the checked is deemed to be \"safe\" to run. A safe check is one that can be run without negatively impacting the host it is run against.  # noqa: E501

        :return: The safe of this VulnerabilityCheck.  # noqa: E501
        :rtype: bool
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this VulnerabilityCheck.

        Whether the checked is deemed to be \"safe\" to run. A safe check is one that can be run without negatively impacting the host it is run against.  # noqa: E501

        :param safe: The safe of this VulnerabilityCheck.  # noqa: E501
        :type: bool
        """

        self._safe = safe

    @property
    def service(self):
        """Gets the service of this VulnerabilityCheck.  # noqa: E501

        Whether the check operates against a service, or false it it is a local check.  # noqa: E501

        :return: The service of this VulnerabilityCheck.  # noqa: E501
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this VulnerabilityCheck.

        Whether the check operates against a service, or false it it is a local check.  # noqa: E501

        :param service: The service of this VulnerabilityCheck.  # noqa: E501
        :type: bool
        """

        self._service = service

    @property
    def unique(self):
        """Gets the unique of this VulnerabilityCheck.  # noqa: E501

        Whether the check may only register a result once during a scan of host. Otherwise, the tests in the check can run multiple times, possibly registering multiple results.  # noqa: E501

        :return: The unique of this VulnerabilityCheck.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this VulnerabilityCheck.

        Whether the check may only register a result once during a scan of host. Otherwise, the tests in the check can run multiple times, possibly registering multiple results.  # noqa: E501

        :param unique: The unique of this VulnerabilityCheck.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    @property
    def vulnerability(self):
        """Gets the vulnerability of this VulnerabilityCheck.  # noqa: E501

        The identifier of the vulnerability the check results in.  # noqa: E501

        :return: The vulnerability of this VulnerabilityCheck.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this VulnerabilityCheck.

        The identifier of the vulnerability the check results in.  # noqa: E501

        :param vulnerability: The vulnerability of this VulnerabilityCheck.  # noqa: E501
        :type: str
        """

        self._vulnerability = vulnerability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
