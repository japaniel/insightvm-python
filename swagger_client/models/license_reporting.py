# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenseReporting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advanced': 'bool',
        'customizable_csv_export': 'bool',
        'pci': 'bool'
    }

    attribute_map = {
        'advanced': 'advanced',
        'customizable_csv_export': 'customizableCSVExport',
        'pci': 'pci'
    }

    def __init__(self, advanced=None, customizable_csv_export=None, pci=None):  # noqa: E501
        """LicenseReporting - a model defined in Swagger"""  # noqa: E501
        self._advanced = None
        self._customizable_csv_export = None
        self._pci = None
        self.discriminator = None
        if advanced is not None:
            self.advanced = advanced
        if customizable_csv_export is not None:
            self.customizable_csv_export = customizable_csv_export
        if pci is not None:
            self.pci = pci

    @property
    def advanced(self):
        """Gets the advanced of this LicenseReporting.  # noqa: E501

        Whether advanced reporting is available.  # noqa: E501

        :return: The advanced of this LicenseReporting.  # noqa: E501
        :rtype: bool
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this LicenseReporting.

        Whether advanced reporting is available.  # noqa: E501

        :param advanced: The advanced of this LicenseReporting.  # noqa: E501
        :type: bool
        """

        self._advanced = advanced

    @property
    def customizable_csv_export(self):
        """Gets the customizable_csv_export of this LicenseReporting.  # noqa: E501

        Whether customizable CSV Export is available.  # noqa: E501

        :return: The customizable_csv_export of this LicenseReporting.  # noqa: E501
        :rtype: bool
        """
        return self._customizable_csv_export

    @customizable_csv_export.setter
    def customizable_csv_export(self, customizable_csv_export):
        """Sets the customizable_csv_export of this LicenseReporting.

        Whether customizable CSV Export is available.  # noqa: E501

        :param customizable_csv_export: The customizable_csv_export of this LicenseReporting.  # noqa: E501
        :type: bool
        """

        self._customizable_csv_export = customizable_csv_export

    @property
    def pci(self):
        """Gets the pci of this LicenseReporting.  # noqa: E501

        Whether PCI reporting is available.  # noqa: E501

        :return: The pci of this LicenseReporting.  # noqa: E501
        :rtype: bool
        """
        return self._pci

    @pci.setter
    def pci(self, pci):
        """Sets the pci of this LicenseReporting.

        Whether PCI reporting is available.  # noqa: E501

        :param pci: The pci of this LicenseReporting.  # noqa: E501
        :type: bool
        """

        self._pci = pci

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseReporting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseReporting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
