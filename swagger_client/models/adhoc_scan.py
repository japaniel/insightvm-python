# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdhocScan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engine_id': 'int',
        'hosts': 'list[str]',
        'name': 'str',
        'template_id': 'str'
    }

    attribute_map = {
        'engine_id': 'engineId',
        'hosts': 'hosts',
        'name': 'name',
        'template_id': 'templateId'
    }

    def __init__(self, engine_id=None, hosts=None, name=None, template_id=None):  # noqa: E501
        """AdhocScan - a model defined in Swagger"""  # noqa: E501
        self._engine_id = None
        self._hosts = None
        self._name = None
        self._template_id = None
        self.discriminator = None
        if engine_id is not None:
            self.engine_id = engine_id
        if hosts is not None:
            self.hosts = hosts
        if name is not None:
            self.name = name
        if template_id is not None:
            self.template_id = template_id

    @property
    def engine_id(self):
        """Gets the engine_id of this AdhocScan.  # noqa: E501

        The identifier of the scan engine.  # noqa: E501

        :return: The engine_id of this AdhocScan.  # noqa: E501
        :rtype: int
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this AdhocScan.

        The identifier of the scan engine.  # noqa: E501

        :param engine_id: The engine_id of this AdhocScan.  # noqa: E501
        :type: int
        """

        self._engine_id = engine_id

    @property
    def hosts(self):
        """Gets the hosts of this AdhocScan.  # noqa: E501

        The hosts that should be included as a part of the scan. This should be a mixture of IP Addresses and Hostnames as a String array.  # noqa: E501

        :return: The hosts of this AdhocScan.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this AdhocScan.

        The hosts that should be included as a part of the scan. This should be a mixture of IP Addresses and Hostnames as a String array.  # noqa: E501

        :param hosts: The hosts of this AdhocScan.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def name(self):
        """Gets the name of this AdhocScan.  # noqa: E501

        The user-driven scan name for the scan.  # noqa: E501

        :return: The name of this AdhocScan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdhocScan.

        The user-driven scan name for the scan.  # noqa: E501

        :param name: The name of this AdhocScan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template_id(self):
        """Gets the template_id of this AdhocScan.  # noqa: E501

        The identifier of the scan template  # noqa: E501

        :return: The template_id of this AdhocScan.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this AdhocScan.

        The identifier of the scan template  # noqa: E501

        :param template_id: The template_id of this AdhocScan.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdhocScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdhocScan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
