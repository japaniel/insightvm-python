# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScanTemplateWebSpiderPatterns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensitive_content': 'str',
        'sensitive_field': 'str'
    }

    attribute_map = {
        'sensitive_content': 'sensitiveContent',
        'sensitive_field': 'sensitiveField'
    }

    def __init__(self, sensitive_content=None, sensitive_field=None):  # noqa: E501
        """ScanTemplateWebSpiderPatterns - a model defined in Swagger"""  # noqa: E501
        self._sensitive_content = None
        self._sensitive_field = None
        self.discriminator = None
        if sensitive_content is not None:
            self.sensitive_content = sensitive_content
        if sensitive_field is not None:
            self.sensitive_field = sensitive_field

    @property
    def sensitive_content(self):
        """Gets the sensitive_content of this ScanTemplateWebSpiderPatterns.  # noqa: E501

        A regular expression that is used to find sensitive content on a page.  # noqa: E501

        :return: The sensitive_content of this ScanTemplateWebSpiderPatterns.  # noqa: E501
        :rtype: str
        """
        return self._sensitive_content

    @sensitive_content.setter
    def sensitive_content(self, sensitive_content):
        """Sets the sensitive_content of this ScanTemplateWebSpiderPatterns.

        A regular expression that is used to find sensitive content on a page.  # noqa: E501

        :param sensitive_content: The sensitive_content of this ScanTemplateWebSpiderPatterns.  # noqa: E501
        :type: str
        """

        self._sensitive_content = sensitive_content

    @property
    def sensitive_field(self):
        """Gets the sensitive_field of this ScanTemplateWebSpiderPatterns.  # noqa: E501

        A regular expression that is used to find fields that may contain sensitive input. Defaults to `\"(p|pass)(word|phrase|wd|code)\"`.  # noqa: E501

        :return: The sensitive_field of this ScanTemplateWebSpiderPatterns.  # noqa: E501
        :rtype: str
        """
        return self._sensitive_field

    @sensitive_field.setter
    def sensitive_field(self, sensitive_field):
        """Sets the sensitive_field of this ScanTemplateWebSpiderPatterns.

        A regular expression that is used to find fields that may contain sensitive input. Defaults to `\"(p|pass)(word|phrase|wd|code)\"`.  # noqa: E501

        :param sensitive_field: The sensitive_field of this ScanTemplateWebSpiderPatterns.  # noqa: E501
        :type: str
        """

        self._sensitive_field = sensitive_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanTemplateWebSpiderPatterns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanTemplateWebSpiderPatterns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
