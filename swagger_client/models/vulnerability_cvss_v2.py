# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VulnerabilityCvssV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_complexity': 'str',
        'access_vector': 'str',
        'authentication': 'str',
        'availability_impact': 'str',
        'confidentiality_impact': 'str',
        'exploit_score': 'float',
        'impact_score': 'float',
        'integrity_impact': 'str',
        'score': 'float',
        'vector': 'str'
    }

    attribute_map = {
        'access_complexity': 'accessComplexity',
        'access_vector': 'accessVector',
        'authentication': 'authentication',
        'availability_impact': 'availabilityImpact',
        'confidentiality_impact': 'confidentialityImpact',
        'exploit_score': 'exploitScore',
        'impact_score': 'impactScore',
        'integrity_impact': 'integrityImpact',
        'score': 'score',
        'vector': 'vector'
    }

    def __init__(self, access_complexity=None, access_vector=None, authentication=None, availability_impact=None, confidentiality_impact=None, exploit_score=None, impact_score=None, integrity_impact=None, score=None, vector=None):  # noqa: E501
        """VulnerabilityCvssV2 - a model defined in Swagger"""  # noqa: E501
        self._access_complexity = None
        self._access_vector = None
        self._authentication = None
        self._availability_impact = None
        self._confidentiality_impact = None
        self._exploit_score = None
        self._impact_score = None
        self._integrity_impact = None
        self._score = None
        self._vector = None
        self.discriminator = None
        if access_complexity is not None:
            self.access_complexity = access_complexity
        if access_vector is not None:
            self.access_vector = access_vector
        if authentication is not None:
            self.authentication = authentication
        if availability_impact is not None:
            self.availability_impact = availability_impact
        if confidentiality_impact is not None:
            self.confidentiality_impact = confidentiality_impact
        if exploit_score is not None:
            self.exploit_score = exploit_score
        if impact_score is not None:
            self.impact_score = impact_score
        if integrity_impact is not None:
            self.integrity_impact = integrity_impact
        if score is not None:
            self.score = score
        if vector is not None:
            self.vector = vector

    @property
    def access_complexity(self):
        """Gets the access_complexity of this VulnerabilityCvssV2.  # noqa: E501

        Access Complexity (AC) component which measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system.  | Access Complexity       | Description                                                              |  | ----------------------- | ------------------------------------------------------------------------ |  | High (`\"H\"`)            | Specialized access conditions exist.                                     |  | Medium (`\"M\"`)          | The access conditions are somewhat specialized.                          |  | Low (`\"L\"`)             | Specialized access conditions or extenuating circumstances do not exist. |  # noqa: E501

        :return: The access_complexity of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._access_complexity

    @access_complexity.setter
    def access_complexity(self, access_complexity):
        """Sets the access_complexity of this VulnerabilityCvssV2.

        Access Complexity (AC) component which measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system.  | Access Complexity       | Description                                                              |  | ----------------------- | ------------------------------------------------------------------------ |  | High (`\"H\"`)            | Specialized access conditions exist.                                     |  | Medium (`\"M\"`)          | The access conditions are somewhat specialized.                          |  | Low (`\"L\"`)             | Specialized access conditions or extenuating circumstances do not exist. |  # noqa: E501

        :param access_complexity: The access_complexity of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "M", "H"]  # noqa: E501
        if access_complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `access_complexity` ({0}), must be one of {1}"  # noqa: E501
                .format(access_complexity, allowed_values)
            )

        self._access_complexity = access_complexity

    @property
    def access_vector(self):
        """Gets the access_vector of this VulnerabilityCvssV2.  # noqa: E501

        Access Vector (Av) component which reflects how the vulnerability is exploited.  | Access Vector              | Description |  | -------------------------- | ----------- |  | Local (`\"L\"`)              | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent Network (`\"A\"`)   | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)            | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |    # noqa: E501

        :return: The access_vector of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._access_vector

    @access_vector.setter
    def access_vector(self, access_vector):
        """Sets the access_vector of this VulnerabilityCvssV2.

        Access Vector (Av) component which reflects how the vulnerability is exploited.  | Access Vector              | Description |  | -------------------------- | ----------- |  | Local (`\"L\"`)              | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent Network (`\"A\"`)   | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)            | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |    # noqa: E501

        :param access_vector: The access_vector of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "A", "N"]  # noqa: E501
        if access_vector not in allowed_values:
            raise ValueError(
                "Invalid value for `access_vector` ({0}), must be one of {1}"  # noqa: E501
                .format(access_vector, allowed_values)
            )

        self._access_vector = access_vector

    @property
    def authentication(self):
        """Gets the authentication of this VulnerabilityCvssV2.  # noqa: E501

        Authentication (Au) component which measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability.  | Authentication       | Description |  | -------------------- | ----------- |  | Multiple (`\"M\"`)     | Exploiting the vulnerability requires that the attacker authenticate two or more times, even if the same credentials are used each time. |  | Single (`\"S\"`)       | The vulnerability requires an attacker to be logged into the system.                                                                     |  | None (`\"N\"`)         | Authentication is not required to exploit the vulnerability.                                                                             |  # noqa: E501

        :return: The authentication of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this VulnerabilityCvssV2.

        Authentication (Au) component which measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability.  | Authentication       | Description |  | -------------------- | ----------- |  | Multiple (`\"M\"`)     | Exploiting the vulnerability requires that the attacker authenticate two or more times, even if the same credentials are used each time. |  | Single (`\"S\"`)       | The vulnerability requires an attacker to be logged into the system.                                                                     |  | None (`\"N\"`)         | Authentication is not required to exploit the vulnerability.                                                                             |  # noqa: E501

        :param authentication: The authentication of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "S", "M"]  # noqa: E501
        if authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication, allowed_values)
            )

        self._authentication = authentication

    @property
    def availability_impact(self):
        """Gets the availability_impact of this VulnerabilityCvssV2.  # noqa: E501

        Availability Impact (A) component which measures the impact to availability of a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the availability of the system. |  | Partial (`\"P\"`)            | There is reduced performance or interruptions in resource availability. |  | Complete (`\"C\"`)           | There is a total shutdown of the affected resource. The attacker can render the resource completely unavailable. |  # noqa: E501

        :return: The availability_impact of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._availability_impact

    @availability_impact.setter
    def availability_impact(self, availability_impact):
        """Sets the availability_impact of this VulnerabilityCvssV2.

        Availability Impact (A) component which measures the impact to availability of a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the availability of the system. |  | Partial (`\"P\"`)            | There is reduced performance or interruptions in resource availability. |  | Complete (`\"C\"`)           | There is a total shutdown of the affected resource. The attacker can render the resource completely unavailable. |  # noqa: E501

        :param availability_impact: The availability_impact of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "P", "C"]  # noqa: E501
        if availability_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_impact, allowed_values)
            )

        self._availability_impact = availability_impact

    @property
    def confidentiality_impact(self):
        """Gets the confidentiality_impact of this VulnerabilityCvssV2.  # noqa: E501

        Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the confidentiality of the system. |  | Partial (`\"P\"`)            | There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained. |  | Complete (`\"C\"`)           | There is total information disclosure, resulting in all system files being revealed. The attacker is able to read all of the system's data (memory, files, etc.) |   # noqa: E501

        :return: The confidentiality_impact of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact):
        """Sets the confidentiality_impact of this VulnerabilityCvssV2.

        Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the confidentiality of the system. |  | Partial (`\"P\"`)            | There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained. |  | Complete (`\"C\"`)           | There is total information disclosure, resulting in all system files being revealed. The attacker is able to read all of the system's data (memory, files, etc.) |   # noqa: E501

        :param confidentiality_impact: The confidentiality_impact of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "P", "C"]  # noqa: E501
        if confidentiality_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `confidentiality_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(confidentiality_impact, allowed_values)
            )

        self._confidentiality_impact = confidentiality_impact

    @property
    def exploit_score(self):
        """Gets the exploit_score of this VulnerabilityCvssV2.  # noqa: E501

        The CVSS exploit score.  # noqa: E501

        :return: The exploit_score of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: float
        """
        return self._exploit_score

    @exploit_score.setter
    def exploit_score(self, exploit_score):
        """Sets the exploit_score of this VulnerabilityCvssV2.

        The CVSS exploit score.  # noqa: E501

        :param exploit_score: The exploit_score of this VulnerabilityCvssV2.  # noqa: E501
        :type: float
        """

        self._exploit_score = exploit_score

    @property
    def impact_score(self):
        """Gets the impact_score of this VulnerabilityCvssV2.  # noqa: E501

        The CVSS impact score.  # noqa: E501

        :return: The impact_score of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: float
        """
        return self._impact_score

    @impact_score.setter
    def impact_score(self, impact_score):
        """Sets the impact_score of this VulnerabilityCvssV2.

        The CVSS impact score.  # noqa: E501

        :param impact_score: The impact_score of this VulnerabilityCvssV2.  # noqa: E501
        :type: float
        """

        self._impact_score = impact_score

    @property
    def integrity_impact(self):
        """Gets the integrity_impact of this VulnerabilityCvssV2.  # noqa: E501

        Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.  | Integrity Impact           | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the integrity of the system. |  | Partial (`\"P\"`)            | Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited. |  | Complete (`\"C\"`)           | There is a total compromise of system integrity. There is a complete loss of system protection, resulting in the entire system being compromised. The attacker is able to modify any files on the target system. |  # noqa: E501

        :return: The integrity_impact of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact):
        """Sets the integrity_impact of this VulnerabilityCvssV2.

        Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.  | Integrity Impact           | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the integrity of the system. |  | Partial (`\"P\"`)            | Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited. |  | Complete (`\"C\"`)           | There is a total compromise of system integrity. There is a complete loss of system protection, resulting in the entire system being compromised. The attacker is able to modify any files on the target system. |  # noqa: E501

        :param integrity_impact: The integrity_impact of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "P", "C"]  # noqa: E501
        if integrity_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `integrity_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(integrity_impact, allowed_values)
            )

        self._integrity_impact = integrity_impact

    @property
    def score(self):
        """Gets the score of this VulnerabilityCvssV2.  # noqa: E501

        The CVSS score, which ranges from 0-10.  # noqa: E501

        :return: The score of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this VulnerabilityCvssV2.

        The CVSS score, which ranges from 0-10.  # noqa: E501

        :param score: The score of this VulnerabilityCvssV2.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def vector(self):
        """Gets the vector of this VulnerabilityCvssV2.  # noqa: E501

        The <a target=\"_blank\" href=\"https://www.first.org/cvss/v2/guide\">CVSS v2</a> vector.  # noqa: E501

        :return: The vector of this VulnerabilityCvssV2.  # noqa: E501
        :rtype: str
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this VulnerabilityCvssV2.

        The <a target=\"_blank\" href=\"https://www.first.org/cvss/v2/guide\">CVSS v2</a> vector.  # noqa: E501

        :param vector: The vector of this VulnerabilityCvssV2.  # noqa: E501
        :type: str
        """

        self._vector = vector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityCvssV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityCvssV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
