# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'AssetPolicyAssessment',
        'benchmark': 'PolicyBenchmark',
        'description': 'str',
        'id': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'policy': 'PolicyMetadataResource',
        'scope': 'str',
        'status': 'str',
        'surrogate_id': 'int',
        'title': 'str'
    }

    attribute_map = {
        'assets': 'assets',
        'benchmark': 'benchmark',
        'description': 'description',
        'id': 'id',
        'links': 'links',
        'name': 'name',
        'policy': 'policy',
        'scope': 'scope',
        'status': 'status',
        'surrogate_id': 'surrogateId',
        'title': 'title'
    }

    def __init__(self, assets=None, benchmark=None, description=None, id=None, links=None, name=None, policy=None, scope=None, status=None, surrogate_id=None, title=None):  # noqa: E501
        """PolicyGroup - a model defined in Swagger"""  # noqa: E501
        self._assets = None
        self._benchmark = None
        self._description = None
        self._id = None
        self._links = None
        self._name = None
        self._policy = None
        self._scope = None
        self._status = None
        self._surrogate_id = None
        self._title = None
        self.discriminator = None
        if assets is not None:
            self.assets = assets
        if benchmark is not None:
            self.benchmark = benchmark
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if scope is not None:
            self.scope = scope
        if status is not None:
            self.status = status
        if surrogate_id is not None:
            self.surrogate_id = surrogate_id
        if title is not None:
            self.title = title

    @property
    def assets(self):
        """Gets the assets of this PolicyGroup.  # noqa: E501


        :return: The assets of this PolicyGroup.  # noqa: E501
        :rtype: AssetPolicyAssessment
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PolicyGroup.


        :param assets: The assets of this PolicyGroup.  # noqa: E501
        :type: AssetPolicyAssessment
        """

        self._assets = assets

    @property
    def benchmark(self):
        """Gets the benchmark of this PolicyGroup.  # noqa: E501


        :return: The benchmark of this PolicyGroup.  # noqa: E501
        :rtype: PolicyBenchmark
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this PolicyGroup.


        :param benchmark: The benchmark of this PolicyGroup.  # noqa: E501
        :type: PolicyBenchmark
        """

        self._benchmark = benchmark

    @property
    def description(self):
        """Gets the description of this PolicyGroup.  # noqa: E501

        A description of the policy group.  # noqa: E501

        :return: The description of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyGroup.

        A description of the policy group.  # noqa: E501

        :param description: The description of this PolicyGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PolicyGroup.  # noqa: E501

        The textual representation of the policy group identifier.  # noqa: E501

        :return: The id of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyGroup.

        The textual representation of the policy group identifier.  # noqa: E501

        :param id: The id of this PolicyGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this PolicyGroup.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this PolicyGroup.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PolicyGroup.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this PolicyGroup.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this PolicyGroup.  # noqa: E501

        The name of the policy group.  # noqa: E501

        :return: The name of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyGroup.

        The name of the policy group.  # noqa: E501

        :param name: The name of this PolicyGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this PolicyGroup.  # noqa: E501


        :return: The policy of this PolicyGroup.  # noqa: E501
        :rtype: PolicyMetadataResource
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PolicyGroup.


        :param policy: The policy of this PolicyGroup.  # noqa: E501
        :type: PolicyMetadataResource
        """

        self._policy = policy

    @property
    def scope(self):
        """Gets the scope of this PolicyGroup.  # noqa: E501

        The textual representation of the policy group scope. Policy groups that are automatically available have `\"Built-in\"` scope, whereas policy groups created by users have scope as `\"Custom\"`.  # noqa: E501

        :return: The scope of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PolicyGroup.

        The textual representation of the policy group scope. Policy groups that are automatically available have `\"Built-in\"` scope, whereas policy groups created by users have scope as `\"Custom\"`.  # noqa: E501

        :param scope: The scope of this PolicyGroup.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def status(self):
        """Gets the status of this PolicyGroup.  # noqa: E501

        The overall compliance status of the policy group.  # noqa: E501

        :return: The status of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PolicyGroup.

        The overall compliance status of the policy group.  # noqa: E501

        :param status: The status of this PolicyGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASS", "FAIL", "NOT_APPLICABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def surrogate_id(self):
        """Gets the surrogate_id of this PolicyGroup.  # noqa: E501

        The identifier of the policy group.  # noqa: E501

        :return: The surrogate_id of this PolicyGroup.  # noqa: E501
        :rtype: int
        """
        return self._surrogate_id

    @surrogate_id.setter
    def surrogate_id(self, surrogate_id):
        """Sets the surrogate_id of this PolicyGroup.

        The identifier of the policy group.  # noqa: E501

        :param surrogate_id: The surrogate_id of this PolicyGroup.  # noqa: E501
        :type: int
        """

        self._surrogate_id = surrogate_id

    @property
    def title(self):
        """Gets the title of this PolicyGroup.  # noqa: E501

        The title of the policy group as visible to the user.  # noqa: E501

        :return: The title of this PolicyGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PolicyGroup.

        The title of the policy group as visible to the user.  # noqa: E501

        :param title: The title of this PolicyGroup.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
