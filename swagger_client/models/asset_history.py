# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'description': 'str',
        'scan_id': 'int',
        'type': 'str',
        'user': 'str',
        'version': 'int',
        'vulnerability_exception_id': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'description': 'description',
        'scan_id': 'scanId',
        'type': 'type',
        'user': 'user',
        'version': 'version',
        'vulnerability_exception_id': 'vulnerabilityExceptionId'
    }

    def __init__(self, _date=None, description=None, scan_id=None, type=None, user=None, version=None, vulnerability_exception_id=None):  # noqa: E501
        """AssetHistory - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._description = None
        self._scan_id = None
        self._type = None
        self._user = None
        self._version = None
        self._vulnerability_exception_id = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if scan_id is not None:
            self.scan_id = scan_id
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version
        if vulnerability_exception_id is not None:
            self.vulnerability_exception_id = vulnerability_exception_id

    @property
    def _date(self):
        """Gets the _date of this AssetHistory.  # noqa: E501

        The date the asset information was collected or changed.  # noqa: E501

        :return: The _date of this AssetHistory.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AssetHistory.

        The date the asset information was collected or changed.  # noqa: E501

        :param _date: The _date of this AssetHistory.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this AssetHistory.  # noqa: E501

        Additional information describing the change.  # noqa: E501

        :return: The description of this AssetHistory.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssetHistory.

        Additional information describing the change.  # noqa: E501

        :param description: The description of this AssetHistory.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def scan_id(self):
        """Gets the scan_id of this AssetHistory.  # noqa: E501

        If a scan-oriented change, the identifier of the corresponding scan the asset was scanned in.  # noqa: E501

        :return: The scan_id of this AssetHistory.  # noqa: E501
        :rtype: int
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this AssetHistory.

        If a scan-oriented change, the identifier of the corresponding scan the asset was scanned in.  # noqa: E501

        :param scan_id: The scan_id of this AssetHistory.  # noqa: E501
        :type: int
        """

        self._scan_id = scan_id

    @property
    def type(self):
        """Gets the type of this AssetHistory.  # noqa: E501

        The type of change. May be one of:  | Type                                | Source of Data                                              |  | ----------------------------------- | ----------------------------------------------------------- |  | `ASSET-IMPORT`, `EXTERNAL-IMPORT`   | External source such as the API                             |  | `EXTERNAL-IMPORT-APPSPIDER`         | Rapid7 InsightAppSec (previously known as AppSpider)        |  | `SCAN`                              | Scan engine scan                                            |  | `ACTIVE-SYNC`                       | ActiveSync                                                  |  | `SCAN-LOG-IMPORT`                   | Manual import of a scan log                                 |  | `VULNERABILITY_EXCEPTION_APPLIED`   | Vulnerability exception applied                             |  | `VULNERABILITY_EXCEPTION_UNAPPLIED` | Vulnerability exception unapplied                           |  # noqa: E501

        :return: The type of this AssetHistory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetHistory.

        The type of change. May be one of:  | Type                                | Source of Data                                              |  | ----------------------------------- | ----------------------------------------------------------- |  | `ASSET-IMPORT`, `EXTERNAL-IMPORT`   | External source such as the API                             |  | `EXTERNAL-IMPORT-APPSPIDER`         | Rapid7 InsightAppSec (previously known as AppSpider)        |  | `SCAN`                              | Scan engine scan                                            |  | `ACTIVE-SYNC`                       | ActiveSync                                                  |  | `SCAN-LOG-IMPORT`                   | Manual import of a scan log                                 |  | `VULNERABILITY_EXCEPTION_APPLIED`   | Vulnerability exception applied                             |  | `VULNERABILITY_EXCEPTION_UNAPPLIED` | Vulnerability exception unapplied                           |  # noqa: E501

        :param type: The type of this AssetHistory.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this AssetHistory.  # noqa: E501

        If a vulnerability exception change, the login name of the user that performed the operation.  # noqa: E501

        :return: The user of this AssetHistory.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AssetHistory.

        If a vulnerability exception change, the login name of the user that performed the operation.  # noqa: E501

        :param user: The user of this AssetHistory.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this AssetHistory.  # noqa: E501

        The version number of the change (a chronological incrementing number starting from 1).   # noqa: E501

        :return: The version of this AssetHistory.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AssetHistory.

        The version number of the change (a chronological incrementing number starting from 1).   # noqa: E501

        :param version: The version of this AssetHistory.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def vulnerability_exception_id(self):
        """Gets the vulnerability_exception_id of this AssetHistory.  # noqa: E501

        If a vulnerability exception change, the identifier of the vulnerability exception that caused the change.  # noqa: E501

        :return: The vulnerability_exception_id of this AssetHistory.  # noqa: E501
        :rtype: int
        """
        return self._vulnerability_exception_id

    @vulnerability_exception_id.setter
    def vulnerability_exception_id(self, vulnerability_exception_id):
        """Sets the vulnerability_exception_id of this AssetHistory.

        If a vulnerability exception change, the identifier of the vulnerability exception that caused the change.  # noqa: E501

        :param vulnerability_exception_id: The vulnerability_exception_id of this AssetHistory.  # noqa: E501
        :type: int
        """

        self._vulnerability_exception_id = vulnerability_exception_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
