# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'Account',
        'description': 'str',
        'enabled': 'bool',
        'host_restriction': 'str',
        'id': 'int',
        'links': 'list[Link]',
        'name': 'str',
        'port_restriction': 'int'
    }

    attribute_map = {
        'account': 'account',
        'description': 'description',
        'enabled': 'enabled',
        'host_restriction': 'hostRestriction',
        'id': 'id',
        'links': 'links',
        'name': 'name',
        'port_restriction': 'portRestriction'
    }

    def __init__(self, account=None, description=None, enabled=None, host_restriction=None, id=None, links=None, name=None, port_restriction=None):  # noqa: E501
        """SiteCredential - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._description = None
        self._enabled = None
        self._host_restriction = None
        self._id = None
        self._links = None
        self._name = None
        self._port_restriction = None
        self.discriminator = None
        self.account = account
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if host_restriction is not None:
            self.host_restriction = host_restriction
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        self.name = name
        if port_restriction is not None:
            self.port_restriction = port_restriction

    @property
    def account(self):
        """Gets the account of this SiteCredential.  # noqa: E501


        :return: The account of this SiteCredential.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SiteCredential.


        :param account: The account of this SiteCredential.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def description(self):
        """Gets the description of this SiteCredential.  # noqa: E501

        The description of the credential.  # noqa: E501

        :return: The description of this SiteCredential.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteCredential.

        The description of the credential.  # noqa: E501

        :param description: The description of this SiteCredential.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this SiteCredential.  # noqa: E501

        Flag indicating whether the credential is enabled for use during the scan.  # noqa: E501

        :return: The enabled of this SiteCredential.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SiteCredential.

        Flag indicating whether the credential is enabled for use during the scan.  # noqa: E501

        :param enabled: The enabled of this SiteCredential.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def host_restriction(self):
        """Gets the host_restriction of this SiteCredential.  # noqa: E501

        The host name or IP address that you want to restrict the credentials to.  # noqa: E501

        :return: The host_restriction of this SiteCredential.  # noqa: E501
        :rtype: str
        """
        return self._host_restriction

    @host_restriction.setter
    def host_restriction(self, host_restriction):
        """Sets the host_restriction of this SiteCredential.

        The host name or IP address that you want to restrict the credentials to.  # noqa: E501

        :param host_restriction: The host_restriction of this SiteCredential.  # noqa: E501
        :type: str
        """

        self._host_restriction = host_restriction

    @property
    def id(self):
        """Gets the id of this SiteCredential.  # noqa: E501

        The identifier of the credential.  # noqa: E501

        :return: The id of this SiteCredential.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteCredential.

        The identifier of the credential.  # noqa: E501

        :param id: The id of this SiteCredential.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this SiteCredential.  # noqa: E501


        :return: The links of this SiteCredential.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SiteCredential.


        :param links: The links of this SiteCredential.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this SiteCredential.  # noqa: E501

        The name of the credential.  # noqa: E501

        :return: The name of this SiteCredential.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteCredential.

        The name of the credential.  # noqa: E501

        :param name: The name of this SiteCredential.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def port_restriction(self):
        """Gets the port_restriction of this SiteCredential.  # noqa: E501

        Further restricts the credential to attempt to authenticate on a specific port. The port can only be restricted if the property `hostRestriction` is specified.  # noqa: E501

        :return: The port_restriction of this SiteCredential.  # noqa: E501
        :rtype: int
        """
        return self._port_restriction

    @port_restriction.setter
    def port_restriction(self, port_restriction):
        """Sets the port_restriction of this SiteCredential.

        Further restricts the credential to attempt to authenticate on a specific port. The port can only be restricted if the property `hostRestriction` is specified.  # noqa: E501

        :param port_restriction: The port_restriction of this SiteCredential.  # noqa: E501
        :type: int
        """

        self._port_restriction = port_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
