# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Features(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adaptive_security': 'bool',
        'agents': 'bool',
        'dynamic_discovery': 'bool',
        'early_access': 'bool',
        'engine_pool': 'bool',
        'insight_platform': 'bool',
        'mobile': 'bool',
        'multitenancy': 'bool',
        'policy_editor': 'bool',
        'policy_manager': 'bool',
        'remediation_analytics': 'bool',
        'reporting': 'LicenseReporting',
        'scanning': 'LicenseScanning'
    }

    attribute_map = {
        'adaptive_security': 'adaptiveSecurity',
        'agents': 'agents',
        'dynamic_discovery': 'dynamicDiscovery',
        'early_access': 'earlyAccess',
        'engine_pool': 'enginePool',
        'insight_platform': 'insightPlatform',
        'mobile': 'mobile',
        'multitenancy': 'multitenancy',
        'policy_editor': 'policyEditor',
        'policy_manager': 'policyManager',
        'remediation_analytics': 'remediationAnalytics',
        'reporting': 'reporting',
        'scanning': 'scanning'
    }

    def __init__(self, adaptive_security=None, agents=None, dynamic_discovery=None, early_access=None, engine_pool=None, insight_platform=None, mobile=None, multitenancy=None, policy_editor=None, policy_manager=None, remediation_analytics=None, reporting=None, scanning=None):  # noqa: E501
        """Features - a model defined in Swagger"""  # noqa: E501
        self._adaptive_security = None
        self._agents = None
        self._dynamic_discovery = None
        self._early_access = None
        self._engine_pool = None
        self._insight_platform = None
        self._mobile = None
        self._multitenancy = None
        self._policy_editor = None
        self._policy_manager = None
        self._remediation_analytics = None
        self._reporting = None
        self._scanning = None
        self.discriminator = None
        if adaptive_security is not None:
            self.adaptive_security = adaptive_security
        if agents is not None:
            self.agents = agents
        if dynamic_discovery is not None:
            self.dynamic_discovery = dynamic_discovery
        if early_access is not None:
            self.early_access = early_access
        if engine_pool is not None:
            self.engine_pool = engine_pool
        if insight_platform is not None:
            self.insight_platform = insight_platform
        if mobile is not None:
            self.mobile = mobile
        if multitenancy is not None:
            self.multitenancy = multitenancy
        if policy_editor is not None:
            self.policy_editor = policy_editor
        if policy_manager is not None:
            self.policy_manager = policy_manager
        if remediation_analytics is not None:
            self.remediation_analytics = remediation_analytics
        if reporting is not None:
            self.reporting = reporting
        if scanning is not None:
            self.scanning = scanning

    @property
    def adaptive_security(self):
        """Gets the adaptive_security of this Features.  # noqa: E501

        Whether Adaptive Security features are available.  # noqa: E501

        :return: The adaptive_security of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._adaptive_security

    @adaptive_security.setter
    def adaptive_security(self, adaptive_security):
        """Sets the adaptive_security of this Features.

        Whether Adaptive Security features are available.  # noqa: E501

        :param adaptive_security: The adaptive_security of this Features.  # noqa: E501
        :type: bool
        """

        self._adaptive_security = adaptive_security

    @property
    def agents(self):
        """Gets the agents of this Features.  # noqa: E501

        Whether the use of agents is allowed.  # noqa: E501

        :return: The agents of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Features.

        Whether the use of agents is allowed.  # noqa: E501

        :param agents: The agents of this Features.  # noqa: E501
        :type: bool
        """

        self._agents = agents

    @property
    def dynamic_discovery(self):
        """Gets the dynamic_discovery of this Features.  # noqa: E501

        Whether dynamic discovery sources may be used.  # noqa: E501

        :return: The dynamic_discovery of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_discovery

    @dynamic_discovery.setter
    def dynamic_discovery(self, dynamic_discovery):
        """Sets the dynamic_discovery of this Features.

        Whether dynamic discovery sources may be used.  # noqa: E501

        :param dynamic_discovery: The dynamic_discovery of this Features.  # noqa: E501
        :type: bool
        """

        self._dynamic_discovery = dynamic_discovery

    @property
    def early_access(self):
        """Gets the early_access of this Features.  # noqa: E501

        Whether early-access features are available prior to general availability.  # noqa: E501

        :return: The early_access of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._early_access

    @early_access.setter
    def early_access(self, early_access):
        """Sets the early_access of this Features.

        Whether early-access features are available prior to general availability.  # noqa: E501

        :param early_access: The early_access of this Features.  # noqa: E501
        :type: bool
        """

        self._early_access = early_access

    @property
    def engine_pool(self):
        """Gets the engine_pool of this Features.  # noqa: E501

        Whether scan engine pools may be used.  # noqa: E501

        :return: The engine_pool of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._engine_pool

    @engine_pool.setter
    def engine_pool(self, engine_pool):
        """Sets the engine_pool of this Features.

        Whether scan engine pools may be used.  # noqa: E501

        :param engine_pool: The engine_pool of this Features.  # noqa: E501
        :type: bool
        """

        self._engine_pool = engine_pool

    @property
    def insight_platform(self):
        """Gets the insight_platform of this Features.  # noqa: E501

        Whether the usage of the Insight Platform is allowed.  # noqa: E501

        :return: The insight_platform of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._insight_platform

    @insight_platform.setter
    def insight_platform(self, insight_platform):
        """Sets the insight_platform of this Features.

        Whether the usage of the Insight Platform is allowed.  # noqa: E501

        :param insight_platform: The insight_platform of this Features.  # noqa: E501
        :type: bool
        """

        self._insight_platform = insight_platform

    @property
    def mobile(self):
        """Gets the mobile of this Features.  # noqa: E501

        Whether mobile features are allowed.  # noqa: E501

        :return: The mobile of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Features.

        Whether mobile features are allowed.  # noqa: E501

        :param mobile: The mobile of this Features.  # noqa: E501
        :type: bool
        """

        self._mobile = mobile

    @property
    def multitenancy(self):
        """Gets the multitenancy of this Features.  # noqa: E501

        Whether multitenancy is allowed.  # noqa: E501

        :return: The multitenancy of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._multitenancy

    @multitenancy.setter
    def multitenancy(self, multitenancy):
        """Sets the multitenancy of this Features.

        Whether multitenancy is allowed.  # noqa: E501

        :param multitenancy: The multitenancy of this Features.  # noqa: E501
        :type: bool
        """

        self._multitenancy = multitenancy

    @property
    def policy_editor(self):
        """Gets the policy_editor of this Features.  # noqa: E501

        Whether the editing of policies is allowed.  # noqa: E501

        :return: The policy_editor of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._policy_editor

    @policy_editor.setter
    def policy_editor(self, policy_editor):
        """Sets the policy_editor of this Features.

        Whether the editing of policies is allowed.  # noqa: E501

        :param policy_editor: The policy_editor of this Features.  # noqa: E501
        :type: bool
        """

        self._policy_editor = policy_editor

    @property
    def policy_manager(self):
        """Gets the policy_manager of this Features.  # noqa: E501

        Whether the policy manager is allowed.  # noqa: E501

        :return: The policy_manager of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._policy_manager

    @policy_manager.setter
    def policy_manager(self, policy_manager):
        """Sets the policy_manager of this Features.

        Whether the policy manager is allowed.  # noqa: E501

        :param policy_manager: The policy_manager of this Features.  # noqa: E501
        :type: bool
        """

        self._policy_manager = policy_manager

    @property
    def remediation_analytics(self):
        """Gets the remediation_analytics of this Features.  # noqa: E501

        Whether Remediation Analytics features are available.  # noqa: E501

        :return: The remediation_analytics of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._remediation_analytics

    @remediation_analytics.setter
    def remediation_analytics(self, remediation_analytics):
        """Sets the remediation_analytics of this Features.

        Whether Remediation Analytics features are available.  # noqa: E501

        :param remediation_analytics: The remediation_analytics of this Features.  # noqa: E501
        :type: bool
        """

        self._remediation_analytics = remediation_analytics

    @property
    def reporting(self):
        """Gets the reporting of this Features.  # noqa: E501


        :return: The reporting of this Features.  # noqa: E501
        :rtype: LicenseReporting
        """
        return self._reporting

    @reporting.setter
    def reporting(self, reporting):
        """Sets the reporting of this Features.


        :param reporting: The reporting of this Features.  # noqa: E501
        :type: LicenseReporting
        """

        self._reporting = reporting

    @property
    def scanning(self):
        """Gets the scanning of this Features.  # noqa: E501


        :return: The scanning of this Features.  # noqa: E501
        :rtype: LicenseScanning
        """
        return self._scanning

    @scanning.setter
    def scanning(self, scanning):
        """Sets the scanning of this Features.


        :param scanning: The scanning of this Features.  # noqa: E501
        :type: LicenseScanning
        """

        self._scanning = scanning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Features, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Features):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
