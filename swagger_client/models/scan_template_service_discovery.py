# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScanTemplateServiceDiscovery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name_file': 'str',
        'tcp': 'ScanTemplateServiceDiscoveryTcp',
        'udp': 'ScanTemplateServiceDiscoveryUdp'
    }

    attribute_map = {
        'service_name_file': 'serviceNameFile',
        'tcp': 'tcp',
        'udp': 'udp'
    }

    def __init__(self, service_name_file=None, tcp=None, udp=None):  # noqa: E501
        """ScanTemplateServiceDiscovery - a model defined in Swagger"""  # noqa: E501
        self._service_name_file = None
        self._tcp = None
        self._udp = None
        self.discriminator = None
        if service_name_file is not None:
            self.service_name_file = service_name_file
        if tcp is not None:
            self.tcp = tcp
        if udp is not None:
            self.udp = udp

    @property
    def service_name_file(self):
        """Gets the service_name_file of this ScanTemplateServiceDiscovery.  # noqa: E501

        An optional file that lists each port and the service that commonly resides on it. If scans cannot identify actual services on ports, service names will be derived from this file in scan results. Defaults to empty.  # noqa: E501

        :return: The service_name_file of this ScanTemplateServiceDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._service_name_file

    @service_name_file.setter
    def service_name_file(self, service_name_file):
        """Sets the service_name_file of this ScanTemplateServiceDiscovery.

        An optional file that lists each port and the service that commonly resides on it. If scans cannot identify actual services on ports, service names will be derived from this file in scan results. Defaults to empty.  # noqa: E501

        :param service_name_file: The service_name_file of this ScanTemplateServiceDiscovery.  # noqa: E501
        :type: str
        """

        self._service_name_file = service_name_file

    @property
    def tcp(self):
        """Gets the tcp of this ScanTemplateServiceDiscovery.  # noqa: E501


        :return: The tcp of this ScanTemplateServiceDiscovery.  # noqa: E501
        :rtype: ScanTemplateServiceDiscoveryTcp
        """
        return self._tcp

    @tcp.setter
    def tcp(self, tcp):
        """Sets the tcp of this ScanTemplateServiceDiscovery.


        :param tcp: The tcp of this ScanTemplateServiceDiscovery.  # noqa: E501
        :type: ScanTemplateServiceDiscoveryTcp
        """

        self._tcp = tcp

    @property
    def udp(self):
        """Gets the udp of this ScanTemplateServiceDiscovery.  # noqa: E501


        :return: The udp of this ScanTemplateServiceDiscovery.  # noqa: E501
        :rtype: ScanTemplateServiceDiscoveryUdp
        """
        return self._udp

    @udp.setter
    def udp(self, udp):
        """Sets the udp of this ScanTemplateServiceDiscovery.


        :param udp: The udp of this ScanTemplateServiceDiscovery.  # noqa: E501
        :type: ScanTemplateServiceDiscoveryUdp
        """

        self._udp = udp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanTemplateServiceDiscovery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanTemplateServiceDiscovery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
