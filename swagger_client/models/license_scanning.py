# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenseScanning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discovery': 'bool',
        'policy': 'LicensePolicyScanning',
        'scada': 'bool',
        'virtual': 'bool',
        'web_application': 'bool'
    }

    attribute_map = {
        'discovery': 'discovery',
        'policy': 'policy',
        'scada': 'scada',
        'virtual': 'virtual',
        'web_application': 'webApplication'
    }

    def __init__(self, discovery=None, policy=None, scada=None, virtual=None, web_application=None):  # noqa: E501
        """LicenseScanning - a model defined in Swagger"""  # noqa: E501
        self._discovery = None
        self._policy = None
        self._scada = None
        self._virtual = None
        self._web_application = None
        self.discriminator = None
        if discovery is not None:
            self.discovery = discovery
        if policy is not None:
            self.policy = policy
        if scada is not None:
            self.scada = scada
        if virtual is not None:
            self.virtual = virtual
        if web_application is not None:
            self.web_application = web_application

    @property
    def discovery(self):
        """Gets the discovery of this LicenseScanning.  # noqa: E501

        Whether discovery scanning may be used.  # noqa: E501

        :return: The discovery of this LicenseScanning.  # noqa: E501
        :rtype: bool
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this LicenseScanning.

        Whether discovery scanning may be used.  # noqa: E501

        :param discovery: The discovery of this LicenseScanning.  # noqa: E501
        :type: bool
        """

        self._discovery = discovery

    @property
    def policy(self):
        """Gets the policy of this LicenseScanning.  # noqa: E501


        :return: The policy of this LicenseScanning.  # noqa: E501
        :rtype: LicensePolicyScanning
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this LicenseScanning.


        :param policy: The policy of this LicenseScanning.  # noqa: E501
        :type: LicensePolicyScanning
        """

        self._policy = policy

    @property
    def scada(self):
        """Gets the scada of this LicenseScanning.  # noqa: E501

        Whether SCADA scanning may be used.  # noqa: E501

        :return: The scada of this LicenseScanning.  # noqa: E501
        :rtype: bool
        """
        return self._scada

    @scada.setter
    def scada(self, scada):
        """Sets the scada of this LicenseScanning.

        Whether SCADA scanning may be used.  # noqa: E501

        :param scada: The scada of this LicenseScanning.  # noqa: E501
        :type: bool
        """

        self._scada = scada

    @property
    def virtual(self):
        """Gets the virtual of this LicenseScanning.  # noqa: E501

        Whether virtual scanning may be used.  # noqa: E501

        :return: The virtual of this LicenseScanning.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this LicenseScanning.

        Whether virtual scanning may be used.  # noqa: E501

        :param virtual: The virtual of this LicenseScanning.  # noqa: E501
        :type: bool
        """

        self._virtual = virtual

    @property
    def web_application(self):
        """Gets the web_application of this LicenseScanning.  # noqa: E501

        Whether web scanning may be used.  # noqa: E501

        :return: The web_application of this LicenseScanning.  # noqa: E501
        :rtype: bool
        """
        return self._web_application

    @web_application.setter
    def web_application(self, web_application):
        """Sets the web_application of this LicenseScanning.

        Whether web scanning may be used.  # noqa: E501

        :param web_application: The web_application of this LicenseScanning.  # noqa: E501
        :type: bool
        """

        self._web_application = web_application

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseScanning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseScanning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
