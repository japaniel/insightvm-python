# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VulnerabilityEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirmed_vulnerabilities': 'bool',
        'potential_vulnerabilities': 'bool',
        'unconfirmed_vulnerabilities': 'bool',
        'vulnerability_severity': 'str'
    }

    attribute_map = {
        'confirmed_vulnerabilities': 'confirmedVulnerabilities',
        'potential_vulnerabilities': 'potentialVulnerabilities',
        'unconfirmed_vulnerabilities': 'unconfirmedVulnerabilities',
        'vulnerability_severity': 'vulnerabilitySeverity'
    }

    def __init__(self, confirmed_vulnerabilities=None, potential_vulnerabilities=None, unconfirmed_vulnerabilities=None, vulnerability_severity=None):  # noqa: E501
        """VulnerabilityEvents - a model defined in Swagger"""  # noqa: E501
        self._confirmed_vulnerabilities = None
        self._potential_vulnerabilities = None
        self._unconfirmed_vulnerabilities = None
        self._vulnerability_severity = None
        self.discriminator = None
        self.confirmed_vulnerabilities = confirmed_vulnerabilities
        self.potential_vulnerabilities = potential_vulnerabilities
        self.unconfirmed_vulnerabilities = unconfirmed_vulnerabilities
        self.vulnerability_severity = vulnerability_severity

    @property
    def confirmed_vulnerabilities(self):
        """Gets the confirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501

        Generates an alert for vulnerability results of confirmed vulnerabilties. A vulnerability is \"confirmed\" when asset-specific vulnerability tests, such as exploits, produce positive results. Default value is `true`.  # noqa: E501

        :return: The confirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed_vulnerabilities

    @confirmed_vulnerabilities.setter
    def confirmed_vulnerabilities(self, confirmed_vulnerabilities):
        """Sets the confirmed_vulnerabilities of this VulnerabilityEvents.

        Generates an alert for vulnerability results of confirmed vulnerabilties. A vulnerability is \"confirmed\" when asset-specific vulnerability tests, such as exploits, produce positive results. Default value is `true`.  # noqa: E501

        :param confirmed_vulnerabilities: The confirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :type: bool
        """
        if confirmed_vulnerabilities is None:
            raise ValueError("Invalid value for `confirmed_vulnerabilities`, must not be `None`")  # noqa: E501

        self._confirmed_vulnerabilities = confirmed_vulnerabilities

    @property
    def potential_vulnerabilities(self):
        """Gets the potential_vulnerabilities of this VulnerabilityEvents.  # noqa: E501

        Generates an alert for vulnerability results of potential vulnerabilties. A vulnerability is \"potential\" if a check for a potential vulnerabilty is positive. Default value is `true`.  # noqa: E501

        :return: The potential_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :rtype: bool
        """
        return self._potential_vulnerabilities

    @potential_vulnerabilities.setter
    def potential_vulnerabilities(self, potential_vulnerabilities):
        """Sets the potential_vulnerabilities of this VulnerabilityEvents.

        Generates an alert for vulnerability results of potential vulnerabilties. A vulnerability is \"potential\" if a check for a potential vulnerabilty is positive. Default value is `true`.  # noqa: E501

        :param potential_vulnerabilities: The potential_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :type: bool
        """
        if potential_vulnerabilities is None:
            raise ValueError("Invalid value for `potential_vulnerabilities`, must not be `None`")  # noqa: E501

        self._potential_vulnerabilities = potential_vulnerabilities

    @property
    def unconfirmed_vulnerabilities(self):
        """Gets the unconfirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501

        Generates an alert for vulnerability results of unconfirmed vulnerabilties. A vulnerability is \"unconfirmed\" when a version of a scanned service or software is known to be vulnerable, but there is no positive verification. Default value is `true`.  # noqa: E501

        :return: The unconfirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :rtype: bool
        """
        return self._unconfirmed_vulnerabilities

    @unconfirmed_vulnerabilities.setter
    def unconfirmed_vulnerabilities(self, unconfirmed_vulnerabilities):
        """Sets the unconfirmed_vulnerabilities of this VulnerabilityEvents.

        Generates an alert for vulnerability results of unconfirmed vulnerabilties. A vulnerability is \"unconfirmed\" when a version of a scanned service or software is known to be vulnerable, but there is no positive verification. Default value is `true`.  # noqa: E501

        :param unconfirmed_vulnerabilities: The unconfirmed_vulnerabilities of this VulnerabilityEvents.  # noqa: E501
        :type: bool
        """
        if unconfirmed_vulnerabilities is None:
            raise ValueError("Invalid value for `unconfirmed_vulnerabilities`, must not be `None`")  # noqa: E501

        self._unconfirmed_vulnerabilities = unconfirmed_vulnerabilities

    @property
    def vulnerability_severity(self):
        """Gets the vulnerability_severity of this VulnerabilityEvents.  # noqa: E501

        Generates an alert for vulnerability results of the selected vulnerability severity. Default value is `\"any_severity\"`.  # noqa: E501

        :return: The vulnerability_severity of this VulnerabilityEvents.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_severity

    @vulnerability_severity.setter
    def vulnerability_severity(self, vulnerability_severity):
        """Sets the vulnerability_severity of this VulnerabilityEvents.

        Generates an alert for vulnerability results of the selected vulnerability severity. Default value is `\"any_severity\"`.  # noqa: E501

        :param vulnerability_severity: The vulnerability_severity of this VulnerabilityEvents.  # noqa: E501
        :type: str
        """
        if vulnerability_severity is None:
            raise ValueError("Invalid value for `vulnerability_severity`, must not be `None`")  # noqa: E501
        allowed_values = ["any_severity", "severe_and_critical", "only_critical"]  # noqa: E501
        if vulnerability_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `vulnerability_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(vulnerability_severity, allowed_values)
            )

        self._vulnerability_severity = vulnerability_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
