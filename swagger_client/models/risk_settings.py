# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjust_with_criticality': 'bool',
        'criticality_modifiers': 'RiskModifierSettings',
        'model': 'str'
    }

    attribute_map = {
        'adjust_with_criticality': 'adjustWithCriticality',
        'criticality_modifiers': 'criticalityModifiers',
        'model': 'model'
    }

    def __init__(self, adjust_with_criticality=None, criticality_modifiers=None, model=None):  # noqa: E501
        """RiskSettings - a model defined in Swagger"""  # noqa: E501
        self._adjust_with_criticality = None
        self._criticality_modifiers = None
        self._model = None
        self.discriminator = None
        if adjust_with_criticality is not None:
            self.adjust_with_criticality = adjust_with_criticality
        if criticality_modifiers is not None:
            self.criticality_modifiers = criticality_modifiers
        if model is not None:
            self.model = model

    @property
    def adjust_with_criticality(self):
        """Gets the adjust_with_criticality of this RiskSettings.  # noqa: E501

        Whether risk is adjusted using criticality tags.  # noqa: E501

        :return: The adjust_with_criticality of this RiskSettings.  # noqa: E501
        :rtype: bool
        """
        return self._adjust_with_criticality

    @adjust_with_criticality.setter
    def adjust_with_criticality(self, adjust_with_criticality):
        """Sets the adjust_with_criticality of this RiskSettings.

        Whether risk is adjusted using criticality tags.  # noqa: E501

        :param adjust_with_criticality: The adjust_with_criticality of this RiskSettings.  # noqa: E501
        :type: bool
        """

        self._adjust_with_criticality = adjust_with_criticality

    @property
    def criticality_modifiers(self):
        """Gets the criticality_modifiers of this RiskSettings.  # noqa: E501


        :return: The criticality_modifiers of this RiskSettings.  # noqa: E501
        :rtype: RiskModifierSettings
        """
        return self._criticality_modifiers

    @criticality_modifiers.setter
    def criticality_modifiers(self, criticality_modifiers):
        """Sets the criticality_modifiers of this RiskSettings.


        :param criticality_modifiers: The criticality_modifiers of this RiskSettings.  # noqa: E501
        :type: RiskModifierSettings
        """

        self._criticality_modifiers = criticality_modifiers

    @property
    def model(self):
        """Gets the model of this RiskSettings.  # noqa: E501

        The risk model used to compute risk.  # noqa: E501

        :return: The model of this RiskSettings.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RiskSettings.

        The risk model used to compute risk.  # noqa: E501

        :param model: The model of this RiskSettings.  # noqa: E501
        :type: str
        """

        self._model = model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
