# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharedCredentialAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_type': 'str',
        'community_name': 'str',
        'database': 'str',
        'domain': 'str',
        'enumerate_sids': 'bool',
        'notes_id_password': 'str',
        'ntlm_hash': 'str',
        'oracle_listener_password': 'str',
        'password': 'str',
        'pem_key': 'str',
        'permission_elevation': 'str',
        'permission_elevation_password': 'str',
        'permission_elevation_user_name': 'str',
        'privacy_password': 'str',
        'privacy_type': 'str',
        'private_key_password': 'str',
        'realm': 'str',
        'service': 'str',
        'sid': 'str',
        'use_windows_authentication': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'authentication_type': 'authenticationType',
        'community_name': 'communityName',
        'database': 'database',
        'domain': 'domain',
        'enumerate_sids': 'enumerateSids',
        'notes_id_password': 'notesIDPassword',
        'ntlm_hash': 'ntlmHash',
        'oracle_listener_password': 'oracleListenerPassword',
        'password': 'password',
        'pem_key': 'pemKey',
        'permission_elevation': 'permissionElevation',
        'permission_elevation_password': 'permissionElevationPassword',
        'permission_elevation_user_name': 'permissionElevationUserName',
        'privacy_password': 'privacyPassword',
        'privacy_type': 'privacyType',
        'private_key_password': 'privateKeyPassword',
        'realm': 'realm',
        'service': 'service',
        'sid': 'sid',
        'use_windows_authentication': 'useWindowsAuthentication',
        'username': 'username'
    }

    def __init__(self, authentication_type=None, community_name=None, database=None, domain=None, enumerate_sids=None, notes_id_password=None, ntlm_hash=None, oracle_listener_password=None, password=None, pem_key=None, permission_elevation=None, permission_elevation_password=None, permission_elevation_user_name=None, privacy_password=None, privacy_type=None, private_key_password=None, realm=None, service=None, sid=None, use_windows_authentication=None, username=None):  # noqa: E501
        """SharedCredentialAccount - a model defined in Swagger"""  # noqa: E501
        self._authentication_type = None
        self._community_name = None
        self._database = None
        self._domain = None
        self._enumerate_sids = None
        self._notes_id_password = None
        self._ntlm_hash = None
        self._oracle_listener_password = None
        self._password = None
        self._pem_key = None
        self._permission_elevation = None
        self._permission_elevation_password = None
        self._permission_elevation_user_name = None
        self._privacy_password = None
        self._privacy_type = None
        self._private_key_password = None
        self._realm = None
        self._service = None
        self._sid = None
        self._use_windows_authentication = None
        self._username = None
        self.discriminator = None
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if community_name is not None:
            self.community_name = community_name
        if database is not None:
            self.database = database
        if domain is not None:
            self.domain = domain
        if enumerate_sids is not None:
            self.enumerate_sids = enumerate_sids
        if notes_id_password is not None:
            self.notes_id_password = notes_id_password
        if ntlm_hash is not None:
            self.ntlm_hash = ntlm_hash
        if oracle_listener_password is not None:
            self.oracle_listener_password = oracle_listener_password
        if password is not None:
            self.password = password
        if pem_key is not None:
            self.pem_key = pem_key
        if permission_elevation is not None:
            self.permission_elevation = permission_elevation
        if permission_elevation_password is not None:
            self.permission_elevation_password = permission_elevation_password
        if permission_elevation_user_name is not None:
            self.permission_elevation_user_name = permission_elevation_user_name
        if privacy_password is not None:
            self.privacy_password = privacy_password
        if privacy_type is not None:
            self.privacy_type = privacy_type
        if private_key_password is not None:
            self.private_key_password = private_key_password
        if realm is not None:
            self.realm = realm
        if service is not None:
            self.service = service
        if sid is not None:
            self.sid = sid
        if use_windows_authentication is not None:
            self.use_windows_authentication = use_windows_authentication
        if username is not None:
            self.username = username

    @property
    def authentication_type(self):
        """Gets the authentication_type of this SharedCredentialAccount.  # noqa: E501


        :return: The authentication_type of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this SharedCredentialAccount.


        :param authentication_type: The authentication_type of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._authentication_type = authentication_type

    @property
    def community_name(self):
        """Gets the community_name of this SharedCredentialAccount.  # noqa: E501


        :return: The community_name of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._community_name

    @community_name.setter
    def community_name(self, community_name):
        """Sets the community_name of this SharedCredentialAccount.


        :param community_name: The community_name of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._community_name = community_name

    @property
    def database(self):
        """Gets the database of this SharedCredentialAccount.  # noqa: E501


        :return: The database of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this SharedCredentialAccount.


        :param database: The database of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def domain(self):
        """Gets the domain of this SharedCredentialAccount.  # noqa: E501


        :return: The domain of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SharedCredentialAccount.


        :param domain: The domain of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enumerate_sids(self):
        """Gets the enumerate_sids of this SharedCredentialAccount.  # noqa: E501


        :return: The enumerate_sids of this SharedCredentialAccount.  # noqa: E501
        :rtype: bool
        """
        return self._enumerate_sids

    @enumerate_sids.setter
    def enumerate_sids(self, enumerate_sids):
        """Sets the enumerate_sids of this SharedCredentialAccount.


        :param enumerate_sids: The enumerate_sids of this SharedCredentialAccount.  # noqa: E501
        :type: bool
        """

        self._enumerate_sids = enumerate_sids

    @property
    def notes_id_password(self):
        """Gets the notes_id_password of this SharedCredentialAccount.  # noqa: E501


        :return: The notes_id_password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._notes_id_password

    @notes_id_password.setter
    def notes_id_password(self, notes_id_password):
        """Sets the notes_id_password of this SharedCredentialAccount.


        :param notes_id_password: The notes_id_password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._notes_id_password = notes_id_password

    @property
    def ntlm_hash(self):
        """Gets the ntlm_hash of this SharedCredentialAccount.  # noqa: E501


        :return: The ntlm_hash of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._ntlm_hash

    @ntlm_hash.setter
    def ntlm_hash(self, ntlm_hash):
        """Sets the ntlm_hash of this SharedCredentialAccount.


        :param ntlm_hash: The ntlm_hash of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._ntlm_hash = ntlm_hash

    @property
    def oracle_listener_password(self):
        """Gets the oracle_listener_password of this SharedCredentialAccount.  # noqa: E501


        :return: The oracle_listener_password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._oracle_listener_password

    @oracle_listener_password.setter
    def oracle_listener_password(self, oracle_listener_password):
        """Sets the oracle_listener_password of this SharedCredentialAccount.


        :param oracle_listener_password: The oracle_listener_password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._oracle_listener_password = oracle_listener_password

    @property
    def password(self):
        """Gets the password of this SharedCredentialAccount.  # noqa: E501


        :return: The password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SharedCredentialAccount.


        :param password: The password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pem_key(self):
        """Gets the pem_key of this SharedCredentialAccount.  # noqa: E501


        :return: The pem_key of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._pem_key

    @pem_key.setter
    def pem_key(self, pem_key):
        """Sets the pem_key of this SharedCredentialAccount.


        :param pem_key: The pem_key of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._pem_key = pem_key

    @property
    def permission_elevation(self):
        """Gets the permission_elevation of this SharedCredentialAccount.  # noqa: E501


        :return: The permission_elevation of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._permission_elevation

    @permission_elevation.setter
    def permission_elevation(self, permission_elevation):
        """Sets the permission_elevation of this SharedCredentialAccount.


        :param permission_elevation: The permission_elevation of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._permission_elevation = permission_elevation

    @property
    def permission_elevation_password(self):
        """Gets the permission_elevation_password of this SharedCredentialAccount.  # noqa: E501


        :return: The permission_elevation_password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._permission_elevation_password

    @permission_elevation_password.setter
    def permission_elevation_password(self, permission_elevation_password):
        """Sets the permission_elevation_password of this SharedCredentialAccount.


        :param permission_elevation_password: The permission_elevation_password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._permission_elevation_password = permission_elevation_password

    @property
    def permission_elevation_user_name(self):
        """Gets the permission_elevation_user_name of this SharedCredentialAccount.  # noqa: E501


        :return: The permission_elevation_user_name of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._permission_elevation_user_name

    @permission_elevation_user_name.setter
    def permission_elevation_user_name(self, permission_elevation_user_name):
        """Sets the permission_elevation_user_name of this SharedCredentialAccount.


        :param permission_elevation_user_name: The permission_elevation_user_name of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._permission_elevation_user_name = permission_elevation_user_name

    @property
    def privacy_password(self):
        """Gets the privacy_password of this SharedCredentialAccount.  # noqa: E501


        :return: The privacy_password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._privacy_password

    @privacy_password.setter
    def privacy_password(self, privacy_password):
        """Sets the privacy_password of this SharedCredentialAccount.


        :param privacy_password: The privacy_password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._privacy_password = privacy_password

    @property
    def privacy_type(self):
        """Gets the privacy_type of this SharedCredentialAccount.  # noqa: E501


        :return: The privacy_type of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """Sets the privacy_type of this SharedCredentialAccount.


        :param privacy_type: The privacy_type of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._privacy_type = privacy_type

    @property
    def private_key_password(self):
        """Gets the private_key_password of this SharedCredentialAccount.  # noqa: E501


        :return: The private_key_password of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this SharedCredentialAccount.


        :param private_key_password: The private_key_password of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def realm(self):
        """Gets the realm of this SharedCredentialAccount.  # noqa: E501


        :return: The realm of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this SharedCredentialAccount.


        :param realm: The realm of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def service(self):
        """Gets the service of this SharedCredentialAccount.  # noqa: E501


        :return: The service of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this SharedCredentialAccount.


        :param service: The service of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sid(self):
        """Gets the sid of this SharedCredentialAccount.  # noqa: E501


        :return: The sid of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SharedCredentialAccount.


        :param sid: The sid of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._sid = sid

    @property
    def use_windows_authentication(self):
        """Gets the use_windows_authentication of this SharedCredentialAccount.  # noqa: E501


        :return: The use_windows_authentication of this SharedCredentialAccount.  # noqa: E501
        :rtype: bool
        """
        return self._use_windows_authentication

    @use_windows_authentication.setter
    def use_windows_authentication(self, use_windows_authentication):
        """Sets the use_windows_authentication of this SharedCredentialAccount.


        :param use_windows_authentication: The use_windows_authentication of this SharedCredentialAccount.  # noqa: E501
        :type: bool
        """

        self._use_windows_authentication = use_windows_authentication

    @property
    def username(self):
        """Gets the username of this SharedCredentialAccount.  # noqa: E501


        :return: The username of this SharedCredentialAccount.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SharedCredentialAccount.


        :param username: The username of this SharedCredentialAccount.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedCredentialAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedCredentialAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
