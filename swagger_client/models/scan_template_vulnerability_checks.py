# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScanTemplateVulnerabilityChecks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'ScanTemplateVulnerabilityCheckCategories',
        'correlate': 'bool',
        'individual': 'ScanTemplateVulnerabilityCheckIndividual',
        'links': 'list[Link]',
        'potential': 'bool',
        'types': 'VulnerabilityCheckType',
        'unsafe': 'bool'
    }

    attribute_map = {
        'categories': 'categories',
        'correlate': 'correlate',
        'individual': 'individual',
        'links': 'links',
        'potential': 'potential',
        'types': 'types',
        'unsafe': 'unsafe'
    }

    def __init__(self, categories=None, correlate=None, individual=None, links=None, potential=None, types=None, unsafe=None):  # noqa: E501
        """ScanTemplateVulnerabilityChecks - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._correlate = None
        self._individual = None
        self._links = None
        self._potential = None
        self._types = None
        self._unsafe = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if correlate is not None:
            self.correlate = correlate
        if individual is not None:
            self.individual = individual
        if links is not None:
            self.links = links
        if potential is not None:
            self.potential = potential
        if types is not None:
            self.types = types
        if unsafe is not None:
            self.unsafe = unsafe

    @property
    def categories(self):
        """Gets the categories of this ScanTemplateVulnerabilityChecks.  # noqa: E501


        :return: The categories of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: ScanTemplateVulnerabilityCheckCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ScanTemplateVulnerabilityChecks.


        :param categories: The categories of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: ScanTemplateVulnerabilityCheckCategories
        """

        self._categories = categories

    @property
    def correlate(self):
        """Gets the correlate of this ScanTemplateVulnerabilityChecks.  # noqa: E501

        Whether an extra step is performed at the end of the scan where more trust is put in OS patch checks to attempt to override the results of other checks which could be less reliable.  # noqa: E501

        :return: The correlate of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: bool
        """
        return self._correlate

    @correlate.setter
    def correlate(self, correlate):
        """Sets the correlate of this ScanTemplateVulnerabilityChecks.

        Whether an extra step is performed at the end of the scan where more trust is put in OS patch checks to attempt to override the results of other checks which could be less reliable.  # noqa: E501

        :param correlate: The correlate of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: bool
        """

        self._correlate = correlate

    @property
    def individual(self):
        """Gets the individual of this ScanTemplateVulnerabilityChecks.  # noqa: E501


        :return: The individual of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: ScanTemplateVulnerabilityCheckIndividual
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this ScanTemplateVulnerabilityChecks.


        :param individual: The individual of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: ScanTemplateVulnerabilityCheckIndividual
        """

        self._individual = individual

    @property
    def links(self):
        """Gets the links of this ScanTemplateVulnerabilityChecks.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ScanTemplateVulnerabilityChecks.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def potential(self):
        """Gets the potential of this ScanTemplateVulnerabilityChecks.  # noqa: E501

        Whether checks that result in potential vulnerabilities are assessed during a scan.  # noqa: E501

        :return: The potential of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: bool
        """
        return self._potential

    @potential.setter
    def potential(self, potential):
        """Sets the potential of this ScanTemplateVulnerabilityChecks.

        Whether checks that result in potential vulnerabilities are assessed during a scan.  # noqa: E501

        :param potential: The potential of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: bool
        """

        self._potential = potential

    @property
    def types(self):
        """Gets the types of this ScanTemplateVulnerabilityChecks.  # noqa: E501


        :return: The types of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: VulnerabilityCheckType
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ScanTemplateVulnerabilityChecks.


        :param types: The types of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: VulnerabilityCheckType
        """

        self._types = types

    @property
    def unsafe(self):
        """Gets the unsafe of this ScanTemplateVulnerabilityChecks.  # noqa: E501

        Whether checks considered \"unsafe\" are assessed during a scan.  # noqa: E501

        :return: The unsafe of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :rtype: bool
        """
        return self._unsafe

    @unsafe.setter
    def unsafe(self, unsafe):
        """Sets the unsafe of this ScanTemplateVulnerabilityChecks.

        Whether checks considered \"unsafe\" are assessed during a scan.  # noqa: E501

        :param unsafe: The unsafe of this ScanTemplateVulnerabilityChecks.  # noqa: E501
        :type: bool
        """

        self._unsafe = unsafe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanTemplateVulnerabilityChecks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanTemplateVulnerabilityChecks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
