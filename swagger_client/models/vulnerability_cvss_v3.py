# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VulnerabilityCvssV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attack_complexity': 'str',
        'attack_vector': 'str',
        'availability_impact': 'str',
        'confidentiality_impact': 'str',
        'exploit_score': 'float',
        'impact_score': 'float',
        'integrity_impact': 'str',
        'privilege_required': 'str',
        'scope': 'str',
        'score': 'float',
        'user_interaction': 'str',
        'vector': 'str'
    }

    attribute_map = {
        'attack_complexity': 'attackComplexity',
        'attack_vector': 'attackVector',
        'availability_impact': 'availabilityImpact',
        'confidentiality_impact': 'confidentialityImpact',
        'exploit_score': 'exploitScore',
        'impact_score': 'impactScore',
        'integrity_impact': 'integrityImpact',
        'privilege_required': 'privilegeRequired',
        'scope': 'scope',
        'score': 'score',
        'user_interaction': 'userInteraction',
        'vector': 'vector'
    }

    def __init__(self, attack_complexity=None, attack_vector=None, availability_impact=None, confidentiality_impact=None, exploit_score=None, impact_score=None, integrity_impact=None, privilege_required=None, scope=None, score=None, user_interaction=None, vector=None):  # noqa: E501
        """VulnerabilityCvssV3 - a model defined in Swagger"""  # noqa: E501
        self._attack_complexity = None
        self._attack_vector = None
        self._availability_impact = None
        self._confidentiality_impact = None
        self._exploit_score = None
        self._impact_score = None
        self._integrity_impact = None
        self._privilege_required = None
        self._scope = None
        self._score = None
        self._user_interaction = None
        self._vector = None
        self.discriminator = None
        if attack_complexity is not None:
            self.attack_complexity = attack_complexity
        if attack_vector is not None:
            self.attack_vector = attack_vector
        if availability_impact is not None:
            self.availability_impact = availability_impact
        if confidentiality_impact is not None:
            self.confidentiality_impact = confidentiality_impact
        if exploit_score is not None:
            self.exploit_score = exploit_score
        if impact_score is not None:
            self.impact_score = impact_score
        if integrity_impact is not None:
            self.integrity_impact = integrity_impact
        if privilege_required is not None:
            self.privilege_required = privilege_required
        if scope is not None:
            self.scope = scope
        if score is not None:
            self.score = score
        if user_interaction is not None:
            self.user_interaction = user_interaction
        if vector is not None:
            self.vector = vector

    @property
    def attack_complexity(self):
        """Gets the attack_complexity of this VulnerabilityCvssV3.  # noqa: E501

        Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.  | Access Complexity      | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Low (`\"L\"`)            | Specialized access conditions or extenuating circumstances do not exist. |  | High (`\"H\"`)           | A successful attack depends on conditions beyond the attacker's control. |  # noqa: E501

        :return: The attack_complexity of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._attack_complexity

    @attack_complexity.setter
    def attack_complexity(self, attack_complexity):
        """Sets the attack_complexity of this VulnerabilityCvssV3.

        Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.  | Access Complexity      | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Low (`\"L\"`)            | Specialized access conditions or extenuating circumstances do not exist. |  | High (`\"H\"`)           | A successful attack depends on conditions beyond the attacker's control. |  # noqa: E501

        :param attack_complexity: The attack_complexity of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "H"]  # noqa: E501
        if attack_complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `attack_complexity` ({0}), must be one of {1}"  # noqa: E501
                .format(attack_complexity, allowed_values)
            )

        self._attack_complexity = attack_complexity

    @property
    def attack_vector(self):
        """Gets the attack_vector of this VulnerabilityCvssV3.  # noqa: E501

        Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.  | Access Vector          | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Local (`\"L\"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent (`\"A\"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |    # noqa: E501

        :return: The attack_vector of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._attack_vector

    @attack_vector.setter
    def attack_vector(self, attack_vector):
        """Sets the attack_vector of this VulnerabilityCvssV3.

        Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.  | Access Vector          | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Local (`\"L\"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent (`\"A\"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |    # noqa: E501

        :param attack_vector: The attack_vector of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "A", "L", "P"]  # noqa: E501
        if attack_vector not in allowed_values:
            raise ValueError(
                "Invalid value for `attack_vector` ({0}), must be one of {1}"  # noqa: E501
                .format(attack_vector, allowed_values)
            )

        self._attack_vector = attack_vector

    @property
    def availability_impact(self):
        """Gets the availability_impact of this VulnerabilityCvssV3.  # noqa: E501

        Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |  | Low (`\"L\"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |  | None (`\"N\"`)               | There is no impact to availability within the impacted component. |  # noqa: E501

        :return: The availability_impact of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._availability_impact

    @availability_impact.setter
    def availability_impact(self, availability_impact):
        """Sets the availability_impact of this VulnerabilityCvssV3.

        Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |  | Low (`\"L\"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |  | None (`\"N\"`)               | There is no impact to availability within the impacted component. |  # noqa: E501

        :param availability_impact: The availability_impact of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "L", "H"]  # noqa: E501
        if availability_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_impact, allowed_values)
            )

        self._availability_impact = availability_impact

    @property
    def confidentiality_impact(self):
        """Gets the confidentiality_impact of this VulnerabilityCvssV3.  # noqa: E501

        Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |  | Low (`\"L\"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |  | None (`\"N\"`)               | There is no loss of confidentiality within the impacted component. |  # noqa: E501

        :return: The confidentiality_impact of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact):
        """Sets the confidentiality_impact of this VulnerabilityCvssV3.

        Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |  | Low (`\"L\"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |  | None (`\"N\"`)               | There is no loss of confidentiality within the impacted component. |  # noqa: E501

        :param confidentiality_impact: The confidentiality_impact of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "L", "H"]  # noqa: E501
        if confidentiality_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `confidentiality_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(confidentiality_impact, allowed_values)
            )

        self._confidentiality_impact = confidentiality_impact

    @property
    def exploit_score(self):
        """Gets the exploit_score of this VulnerabilityCvssV3.  # noqa: E501

        The CVSS impact score.  # noqa: E501

        :return: The exploit_score of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: float
        """
        return self._exploit_score

    @exploit_score.setter
    def exploit_score(self, exploit_score):
        """Sets the exploit_score of this VulnerabilityCvssV3.

        The CVSS impact score.  # noqa: E501

        :param exploit_score: The exploit_score of this VulnerabilityCvssV3.  # noqa: E501
        :type: float
        """

        self._exploit_score = exploit_score

    @property
    def impact_score(self):
        """Gets the impact_score of this VulnerabilityCvssV3.  # noqa: E501

        The CVSS exploit score.  # noqa: E501

        :return: The impact_score of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: float
        """
        return self._impact_score

    @impact_score.setter
    def impact_score(self, impact_score):
        """Sets the impact_score of this VulnerabilityCvssV3.

        The CVSS exploit score.  # noqa: E501

        :param impact_score: The impact_score of this VulnerabilityCvssV3.  # noqa: E501
        :type: float
        """

        self._impact_score = impact_score

    @property
    def integrity_impact(self):
        """Gets the integrity_impact of this VulnerabilityCvssV3.  # noqa: E501

        Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.  | Integrity Impact    | Description  |  | ------------------- | ------------ |  | High (`\"H\"`)        | There is a total loss of integrity, or a complete loss of protection. |  | Low (`\"L\"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |  | None (`\"N\"`)        | There is no loss of integrity within the impacted component. |  # noqa: E501

        :return: The integrity_impact of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact):
        """Sets the integrity_impact of this VulnerabilityCvssV3.

        Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.  | Integrity Impact    | Description  |  | ------------------- | ------------ |  | High (`\"H\"`)        | There is a total loss of integrity, or a complete loss of protection. |  | Low (`\"L\"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |  | None (`\"N\"`)        | There is no loss of integrity within the impacted component. |  # noqa: E501

        :param integrity_impact: The integrity_impact of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "L", "H"]  # noqa: E501
        if integrity_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `integrity_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(integrity_impact, allowed_values)
            )

        self._integrity_impact = integrity_impact

    @property
    def privilege_required(self):
        """Gets the privilege_required of this VulnerabilityCvssV3.  # noqa: E501

        Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.  | Privileges Required (PR)     | Description                                                              |  | ---------------------------- | ------------------------------------------------------------------------ |  | None (`\"N\"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |  | Low (`\"L\"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |  | High (`\"H\"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |  # noqa: E501

        :return: The privilege_required of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._privilege_required

    @privilege_required.setter
    def privilege_required(self, privilege_required):
        """Sets the privilege_required of this VulnerabilityCvssV3.

        Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.  | Privileges Required (PR)     | Description                                                              |  | ---------------------------- | ------------------------------------------------------------------------ |  | None (`\"N\"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |  | Low (`\"L\"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |  | High (`\"H\"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |  # noqa: E501

        :param privilege_required: The privilege_required of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "L", "H"]  # noqa: E501
        if privilege_required not in allowed_values:
            raise ValueError(
                "Invalid value for `privilege_required` ({0}), must be one of {1}"  # noqa: E501
                .format(privilege_required, allowed_values)
            )

        self._privilege_required = privilege_required

    @property
    def scope(self):
        """Gets the scope of this VulnerabilityCvssV3.  # noqa: E501

        Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.  | Scope (S)            | Description                                                              |  | -------------------- | ------------------------------------------------------------------------ |  | Unchanged (`\"U\"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |  | Changed (`\"C\"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |  # noqa: E501

        :return: The scope of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this VulnerabilityCvssV3.

        Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.  | Scope (S)            | Description                                                              |  | -------------------- | ------------------------------------------------------------------------ |  | Unchanged (`\"U\"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |  | Changed (`\"C\"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |  # noqa: E501

        :param scope: The scope of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["U", "C"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def score(self):
        """Gets the score of this VulnerabilityCvssV3.  # noqa: E501

        The CVSS score, which ranges from 0-10.  # noqa: E501

        :return: The score of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this VulnerabilityCvssV3.

        The CVSS score, which ranges from 0-10.  # noqa: E501

        :param score: The score of this VulnerabilityCvssV3.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def user_interaction(self):
        """Gets the user_interaction of this VulnerabilityCvssV3.  # noqa: E501

        User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.  | User Interaction (UI)        | Description                                                               |  | ---------------------------- | ------------------------------------------------------------------------- |  | None (`\"N\"`)                 | The vulnerable system can be exploited without interaction from any user. |  | Required (`\"R\"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |  # noqa: E501

        :return: The user_interaction of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._user_interaction

    @user_interaction.setter
    def user_interaction(self, user_interaction):
        """Sets the user_interaction of this VulnerabilityCvssV3.

        User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.  | User Interaction (UI)        | Description                                                               |  | ---------------------------- | ------------------------------------------------------------------------- |  | None (`\"N\"`)                 | The vulnerable system can be exploited without interaction from any user. |  | Required (`\"R\"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |  # noqa: E501

        :param user_interaction: The user_interaction of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "R"]  # noqa: E501
        if user_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `user_interaction` ({0}), must be one of {1}"  # noqa: E501
                .format(user_interaction, allowed_values)
            )

        self._user_interaction = user_interaction

    @property
    def vector(self):
        """Gets the vector of this VulnerabilityCvssV3.  # noqa: E501

        The <a target=\"_blank\" href=\"https://www.first.org/cvss/specification-document\">CVSS v3</a> vector.  # noqa: E501

        :return: The vector of this VulnerabilityCvssV3.  # noqa: E501
        :rtype: str
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this VulnerabilityCvssV3.

        The <a target=\"_blank\" href=\"https://www.first.org/cvss/specification-document\">CVSS v3</a> vector.  # noqa: E501

        :param vector: The vector of this VulnerabilityCvssV3.  # noqa: E501
        :type: str
        """

        self._vector = vector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityCvssV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityCvssV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
