# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocalePreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default': 'str',
        'links': 'list[Link]',
        'reports': 'str'
    }

    attribute_map = {
        'default': 'default',
        'links': 'links',
        'reports': 'reports'
    }

    def __init__(self, default=None, links=None, reports=None):  # noqa: E501
        """LocalePreferences - a model defined in Swagger"""  # noqa: E501
        self._default = None
        self._links = None
        self._reports = None
        self.discriminator = None
        if default is not None:
            self.default = default
        if links is not None:
            self.links = links
        if reports is not None:
            self.reports = reports

    @property
    def default(self):
        """Gets the default of this LocalePreferences.  # noqa: E501

        The default language to use. The format is a <a target=\"_blank\" href=\"https://tools.ietf.org/html/bcp47\">IETF BCP 47</a> language tag.  # noqa: E501

        :return: The default of this LocalePreferences.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this LocalePreferences.

        The default language to use. The format is a <a target=\"_blank\" href=\"https://tools.ietf.org/html/bcp47\">IETF BCP 47</a> language tag.  # noqa: E501

        :param default: The default of this LocalePreferences.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def links(self):
        """Gets the links of this LocalePreferences.  # noqa: E501


        :return: The links of this LocalePreferences.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LocalePreferences.


        :param links: The links of this LocalePreferences.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def reports(self):
        """Gets the reports of this LocalePreferences.  # noqa: E501

        The language to use to generate reports. The format is a <a target=\"_blank\" href=\"https://tools.ietf.org/html/bcp47\">IETF BCP 47</a> language tag.  # noqa: E501

        :return: The reports of this LocalePreferences.  # noqa: E501
        :rtype: str
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this LocalePreferences.

        The language to use to generate reports. The format is a <a target=\"_blank\" href=\"https://tools.ietf.org/html/bcp47\">IETF BCP 47</a> language tag.  # noqa: E501

        :param reports: The reports of this LocalePreferences.  # noqa: E501
        :type: str
        """

        self._reports = reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalePreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalePreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
