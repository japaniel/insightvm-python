# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Criterion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extras': 'object',
        'meta_data': 'IMetaData',
        'metadata': 'MetadataContainer',
        'operator': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'extras': 'extras',
        'meta_data': 'metaData',
        'metadata': 'metadata',
        'operator': 'operator',
        'values': 'values'
    }

    def __init__(self, extras=None, meta_data=None, metadata=None, operator=None, values=None):  # noqa: E501
        """Criterion - a model defined in Swagger"""  # noqa: E501
        self._extras = None
        self._meta_data = None
        self._metadata = None
        self._operator = None
        self._values = None
        self.discriminator = None
        if extras is not None:
            self.extras = extras
        if meta_data is not None:
            self.meta_data = meta_data
        if metadata is not None:
            self.metadata = metadata
        if operator is not None:
            self.operator = operator
        if values is not None:
            self.values = values

    @property
    def extras(self):
        """Gets the extras of this Criterion.  # noqa: E501


        :return: The extras of this Criterion.  # noqa: E501
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this Criterion.


        :param extras: The extras of this Criterion.  # noqa: E501
        :type: object
        """

        self._extras = extras

    @property
    def meta_data(self):
        """Gets the meta_data of this Criterion.  # noqa: E501


        :return: The meta_data of this Criterion.  # noqa: E501
        :rtype: IMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Criterion.


        :param meta_data: The meta_data of this Criterion.  # noqa: E501
        :type: IMetaData
        """

        self._meta_data = meta_data

    @property
    def metadata(self):
        """Gets the metadata of this Criterion.  # noqa: E501


        :return: The metadata of this Criterion.  # noqa: E501
        :rtype: MetadataContainer
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Criterion.


        :param metadata: The metadata of this Criterion.  # noqa: E501
        :type: MetadataContainer
        """

        self._metadata = metadata

    @property
    def operator(self):
        """Gets the operator of this Criterion.  # noqa: E501


        :return: The operator of this Criterion.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Criterion.


        :param operator: The operator of this Criterion.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "IS_NOT", "IS_APPLIED", "IS_NOT_APPLIED", "IN", "NOT_IN", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "NOT_CONTAINS", "LESS_THAN", "GREATER_THAN", "IN_RANGE", "NOT_IN_RANGE", "INCLUDE", "DO_NOT_INCLUDE", "ON_OR_BEFORE", "ON_OR_AFTER", "BETWEEN", "EARLIER_THAN", "WITHIN_THE_LAST", "IS_EMPTY", "IS_NOT_EMPTY", "ARE", "LIKE", "NOT_LIKE"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def values(self):
        """Gets the values of this Criterion.  # noqa: E501


        :return: The values of this Criterion.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Criterion.


        :param values: The values of this Criterion.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Criterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Criterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
