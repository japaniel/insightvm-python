# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteUpdateResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'engine_id': 'int',
        'importance': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'scan_template_id': 'str'
    }

    attribute_map = {
        'description': 'description',
        'engine_id': 'engineId',
        'importance': 'importance',
        'links': 'links',
        'name': 'name',
        'scan_template_id': 'scanTemplateId'
    }

    def __init__(self, description=None, engine_id=None, importance=None, links=None, name=None, scan_template_id=None):  # noqa: E501
        """SiteUpdateResource - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._engine_id = None
        self._importance = None
        self._links = None
        self._name = None
        self._scan_template_id = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.engine_id = engine_id
        self.importance = importance
        if links is not None:
            self.links = links
        self.name = name
        self.scan_template_id = scan_template_id

    @property
    def description(self):
        """Gets the description of this SiteUpdateResource.  # noqa: E501

        The site's description.  # noqa: E501

        :return: The description of this SiteUpdateResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteUpdateResource.

        The site's description.  # noqa: E501

        :param description: The description of this SiteUpdateResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def engine_id(self):
        """Gets the engine_id of this SiteUpdateResource.  # noqa: E501

        The identifier of a scan engine.  # noqa: E501

        :return: The engine_id of this SiteUpdateResource.  # noqa: E501
        :rtype: int
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this SiteUpdateResource.

        The identifier of a scan engine.  # noqa: E501

        :param engine_id: The engine_id of this SiteUpdateResource.  # noqa: E501
        :type: int
        """
        if engine_id is None:
            raise ValueError("Invalid value for `engine_id`, must not be `None`")  # noqa: E501

        self._engine_id = engine_id

    @property
    def importance(self):
        """Gets the importance of this SiteUpdateResource.  # noqa: E501

        The site importance.  # noqa: E501

        :return: The importance of this SiteUpdateResource.  # noqa: E501
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this SiteUpdateResource.

        The site importance.  # noqa: E501

        :param importance: The importance of this SiteUpdateResource.  # noqa: E501
        :type: str
        """
        if importance is None:
            raise ValueError("Invalid value for `importance`, must not be `None`")  # noqa: E501
        allowed_values = ["very_low", "low", "normal", "high", "very_high"]  # noqa: E501
        if importance not in allowed_values:
            raise ValueError(
                "Invalid value for `importance` ({0}), must be one of {1}"  # noqa: E501
                .format(importance, allowed_values)
            )

        self._importance = importance

    @property
    def links(self):
        """Gets the links of this SiteUpdateResource.  # noqa: E501


        :return: The links of this SiteUpdateResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SiteUpdateResource.


        :param links: The links of this SiteUpdateResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this SiteUpdateResource.  # noqa: E501

        The site name. Name must be unique.  # noqa: E501

        :return: The name of this SiteUpdateResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteUpdateResource.

        The site name. Name must be unique.  # noqa: E501

        :param name: The name of this SiteUpdateResource.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def scan_template_id(self):
        """Gets the scan_template_id of this SiteUpdateResource.  # noqa: E501

        The identifier of a scan template.  # noqa: E501

        :return: The scan_template_id of this SiteUpdateResource.  # noqa: E501
        :rtype: str
        """
        return self._scan_template_id

    @scan_template_id.setter
    def scan_template_id(self, scan_template_id):
        """Sets the scan_template_id of this SiteUpdateResource.

        The identifier of a scan template.  # noqa: E501

        :param scan_template_id: The scan_template_id of this SiteUpdateResource.  # noqa: E501
        :type: str
        """
        if scan_template_id is None:
            raise ValueError("Invalid value for `scan_template_id`, must not be `None`")  # noqa: E501

        self._scan_template_id = scan_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteUpdateResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteUpdateResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
