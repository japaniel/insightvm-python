# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vulnerability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'str',
        'categories': 'list[str]',
        'cves': 'list[str]',
        'cvss': 'VulnerabilityCvss',
        'denial_of_service': 'bool',
        'description': 'ContentDescription',
        'exploits': 'int',
        'id': 'str',
        'links': 'list[Link]',
        'malware_kits': 'int',
        'modified': 'str',
        'pci': 'PCI',
        'published': 'str',
        'risk_score': 'float',
        'severity': 'str',
        'severity_score': 'int',
        'title': 'str'
    }

    attribute_map = {
        'added': 'added',
        'categories': 'categories',
        'cves': 'cves',
        'cvss': 'cvss',
        'denial_of_service': 'denialOfService',
        'description': 'description',
        'exploits': 'exploits',
        'id': 'id',
        'links': 'links',
        'malware_kits': 'malwareKits',
        'modified': 'modified',
        'pci': 'pci',
        'published': 'published',
        'risk_score': 'riskScore',
        'severity': 'severity',
        'severity_score': 'severityScore',
        'title': 'title'
    }

    def __init__(self, added=None, categories=None, cves=None, cvss=None, denial_of_service=None, description=None, exploits=None, id=None, links=None, malware_kits=None, modified=None, pci=None, published=None, risk_score=None, severity=None, severity_score=None, title=None):  # noqa: E501
        """Vulnerability - a model defined in Swagger"""  # noqa: E501
        self._added = None
        self._categories = None
        self._cves = None
        self._cvss = None
        self._denial_of_service = None
        self._description = None
        self._exploits = None
        self._id = None
        self._links = None
        self._malware_kits = None
        self._modified = None
        self._pci = None
        self._published = None
        self._risk_score = None
        self._severity = None
        self._severity_score = None
        self._title = None
        self.discriminator = None
        if added is not None:
            self.added = added
        if categories is not None:
            self.categories = categories
        if cves is not None:
            self.cves = cves
        if cvss is not None:
            self.cvss = cvss
        if denial_of_service is not None:
            self.denial_of_service = denial_of_service
        if description is not None:
            self.description = description
        if exploits is not None:
            self.exploits = exploits
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if malware_kits is not None:
            self.malware_kits = malware_kits
        if modified is not None:
            self.modified = modified
        if pci is not None:
            self.pci = pci
        if published is not None:
            self.published = published
        if risk_score is not None:
            self.risk_score = risk_score
        if severity is not None:
            self.severity = severity
        if severity_score is not None:
            self.severity_score = severity_score
        if title is not None:
            self.title = title

    @property
    def added(self):
        """Gets the added of this Vulnerability.  # noqa: E501

        The date the vulnerability coverage was added. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :return: The added of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Vulnerability.

        The date the vulnerability coverage was added. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :param added: The added of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._added = added

    @property
    def categories(self):
        """Gets the categories of this Vulnerability.  # noqa: E501

        All vulnerability categories assigned to this vulnerability.  # noqa: E501

        :return: The categories of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Vulnerability.

        All vulnerability categories assigned to this vulnerability.  # noqa: E501

        :param categories: The categories of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def cves(self):
        """Gets the cves of this Vulnerability.  # noqa: E501

        All <a target=\"_blank\" href=\"https://cve.mitre.org/\">CVE</a>s assigned to this vulnerability.  # noqa: E501

        :return: The cves of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._cves

    @cves.setter
    def cves(self, cves):
        """Sets the cves of this Vulnerability.

        All <a target=\"_blank\" href=\"https://cve.mitre.org/\">CVE</a>s assigned to this vulnerability.  # noqa: E501

        :param cves: The cves of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._cves = cves

    @property
    def cvss(self):
        """Gets the cvss of this Vulnerability.  # noqa: E501


        :return: The cvss of this Vulnerability.  # noqa: E501
        :rtype: VulnerabilityCvss
        """
        return self._cvss

    @cvss.setter
    def cvss(self, cvss):
        """Sets the cvss of this Vulnerability.


        :param cvss: The cvss of this Vulnerability.  # noqa: E501
        :type: VulnerabilityCvss
        """

        self._cvss = cvss

    @property
    def denial_of_service(self):
        """Gets the denial_of_service of this Vulnerability.  # noqa: E501

        Whether the vulnerability can lead to Denial of Service (DoS).  # noqa: E501

        :return: The denial_of_service of this Vulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._denial_of_service

    @denial_of_service.setter
    def denial_of_service(self, denial_of_service):
        """Sets the denial_of_service of this Vulnerability.

        Whether the vulnerability can lead to Denial of Service (DoS).  # noqa: E501

        :param denial_of_service: The denial_of_service of this Vulnerability.  # noqa: E501
        :type: bool
        """

        self._denial_of_service = denial_of_service

    @property
    def description(self):
        """Gets the description of this Vulnerability.  # noqa: E501


        :return: The description of this Vulnerability.  # noqa: E501
        :rtype: ContentDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vulnerability.


        :param description: The description of this Vulnerability.  # noqa: E501
        :type: ContentDescription
        """

        self._description = description

    @property
    def exploits(self):
        """Gets the exploits of this Vulnerability.  # noqa: E501

        The exploits that can be used to exploit a vulnerability.  # noqa: E501

        :return: The exploits of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._exploits

    @exploits.setter
    def exploits(self, exploits):
        """Sets the exploits of this Vulnerability.

        The exploits that can be used to exploit a vulnerability.  # noqa: E501

        :param exploits: The exploits of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._exploits = exploits

    @property
    def id(self):
        """Gets the id of this Vulnerability.  # noqa: E501

        The identifier of the vulnerability.  # noqa: E501

        :return: The id of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vulnerability.

        The identifier of the vulnerability.  # noqa: E501

        :param id: The id of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Vulnerability.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Vulnerability.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Vulnerability.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Vulnerability.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def malware_kits(self):
        """Gets the malware_kits of this Vulnerability.  # noqa: E501

        The malware kits that are known to be used to exploit the vulnerability.  # noqa: E501

        :return: The malware_kits of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._malware_kits

    @malware_kits.setter
    def malware_kits(self, malware_kits):
        """Sets the malware_kits of this Vulnerability.

        The malware kits that are known to be used to exploit the vulnerability.  # noqa: E501

        :param malware_kits: The malware_kits of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._malware_kits = malware_kits

    @property
    def modified(self):
        """Gets the modified of this Vulnerability.  # noqa: E501

        The last date the vulnerability was modified. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :return: The modified of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Vulnerability.

        The last date the vulnerability was modified. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :param modified: The modified of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def pci(self):
        """Gets the pci of this Vulnerability.  # noqa: E501


        :return: The pci of this Vulnerability.  # noqa: E501
        :rtype: PCI
        """
        return self._pci

    @pci.setter
    def pci(self, pci):
        """Sets the pci of this Vulnerability.


        :param pci: The pci of this Vulnerability.  # noqa: E501
        :type: PCI
        """

        self._pci = pci

    @property
    def published(self):
        """Gets the published of this Vulnerability.  # noqa: E501

        The date the vulnerability was first published or announced. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :return: The published of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Vulnerability.

        The date the vulnerability was first published or announced. The format is an ISO 8601 date, `YYYY-MM-DD`.  # noqa: E501

        :param published: The published of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._published = published

    @property
    def risk_score(self):
        """Gets the risk_score of this Vulnerability.  # noqa: E501

        The risk score of the vulnerability, rounded to a maximum of to digits of precision. If using the default Rapid7 Real Risk™ model, this value ranges from 0-1000.  # noqa: E501

        :return: The risk_score of this Vulnerability.  # noqa: E501
        :rtype: float
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this Vulnerability.

        The risk score of the vulnerability, rounded to a maximum of to digits of precision. If using the default Rapid7 Real Risk™ model, this value ranges from 0-1000.  # noqa: E501

        :param risk_score: The risk_score of this Vulnerability.  # noqa: E501
        :type: float
        """

        self._risk_score = risk_score

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.  # noqa: E501

        The severity of the vulnerability, one of: `\"Moderate\"`, `\"Severe\"`, `\"Critical\"`.  # noqa: E501

        :return: The severity of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.

        The severity of the vulnerability, one of: `\"Moderate\"`, `\"Severe\"`, `\"Critical\"`.  # noqa: E501

        :param severity: The severity of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def severity_score(self):
        """Gets the severity_score of this Vulnerability.  # noqa: E501

        The severity score of the vulnerability, on a scale of 0-10.  # noqa: E501

        :return: The severity_score of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._severity_score

    @severity_score.setter
    def severity_score(self, severity_score):
        """Sets the severity_score of this Vulnerability.

        The severity score of the vulnerability, on a scale of 0-10.  # noqa: E501

        :param severity_score: The severity_score of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._severity_score = severity_score

    @property
    def title(self):
        """Gets the title of this Vulnerability.  # noqa: E501

        The title (summary) of the vulnerability.  # noqa: E501

        :return: The title of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Vulnerability.

        The title (summary) of the vulnerability.  # noqa: E501

        :param title: The title of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vulnerability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
