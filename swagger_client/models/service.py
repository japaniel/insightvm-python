# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configurations': 'list[Configuration]',
        'databases': 'list[Database]',
        'family': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'port': 'int',
        'product': 'str',
        'protocol': 'str',
        'user_groups': 'list[GroupAccount]',
        'users': 'list[UserAccount]',
        'vendor': 'str',
        'version': 'str',
        'web_applications': 'list[WebApplication]'
    }

    attribute_map = {
        'configurations': 'configurations',
        'databases': 'databases',
        'family': 'family',
        'links': 'links',
        'name': 'name',
        'port': 'port',
        'product': 'product',
        'protocol': 'protocol',
        'user_groups': 'userGroups',
        'users': 'users',
        'vendor': 'vendor',
        'version': 'version',
        'web_applications': 'webApplications'
    }

    def __init__(self, configurations=None, databases=None, family=None, links=None, name=None, port=None, product=None, protocol=None, user_groups=None, users=None, vendor=None, version=None, web_applications=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501
        self._configurations = None
        self._databases = None
        self._family = None
        self._links = None
        self._name = None
        self._port = None
        self._product = None
        self._protocol = None
        self._user_groups = None
        self._users = None
        self._vendor = None
        self._version = None
        self._web_applications = None
        self.discriminator = None
        if configurations is not None:
            self.configurations = configurations
        if databases is not None:
            self.databases = databases
        if family is not None:
            self.family = family
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        self.port = port
        if product is not None:
            self.product = product
        self.protocol = protocol
        if user_groups is not None:
            self.user_groups = user_groups
        if users is not None:
            self.users = users
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version
        if web_applications is not None:
            self.web_applications = web_applications

    @property
    def configurations(self):
        """Gets the configurations of this Service.  # noqa: E501

        Configuration key-values pairs enumerated on the service.  # noqa: E501

        :return: The configurations of this Service.  # noqa: E501
        :rtype: list[Configuration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this Service.

        Configuration key-values pairs enumerated on the service.  # noqa: E501

        :param configurations: The configurations of this Service.  # noqa: E501
        :type: list[Configuration]
        """

        self._configurations = configurations

    @property
    def databases(self):
        """Gets the databases of this Service.  # noqa: E501

        The databases enumerated on the service.  # noqa: E501

        :return: The databases of this Service.  # noqa: E501
        :rtype: list[Database]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this Service.

        The databases enumerated on the service.  # noqa: E501

        :param databases: The databases of this Service.  # noqa: E501
        :type: list[Database]
        """

        self._databases = databases

    @property
    def family(self):
        """Gets the family of this Service.  # noqa: E501

        The family of the service.  # noqa: E501

        :return: The family of this Service.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Service.

        The family of the service.  # noqa: E501

        :param family: The family of this Service.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def links(self):
        """Gets the links of this Service.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Service.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Service.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Service.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Service.  # noqa: E501

        The name of the service.  # noqa: E501

        :return: The name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The name of the service.  # noqa: E501

        :param name: The name of this Service.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this Service.  # noqa: E501

        The port of the service.  # noqa: E501

        :return: The port of this Service.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Service.

        The port of the service.  # noqa: E501

        :param port: The port of this Service.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def product(self):
        """Gets the product of this Service.  # noqa: E501

        The product running the service.  # noqa: E501

        :return: The product of this Service.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Service.

        The product running the service.  # noqa: E501

        :param product: The product of this Service.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def protocol(self):
        """Gets the protocol of this Service.  # noqa: E501

        The protocol of the service.  # noqa: E501

        :return: The protocol of this Service.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Service.

        The protocol of the service.  # noqa: E501

        :param protocol: The protocol of this Service.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["ip", "icmp", "igmp", "ggp", "tcp", "pup", "udp", "idp", "esp", "nd", "raw"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def user_groups(self):
        """Gets the user_groups of this Service.  # noqa: E501

        The group accounts enumerated on the service.  # noqa: E501

        :return: The user_groups of this Service.  # noqa: E501
        :rtype: list[GroupAccount]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this Service.

        The group accounts enumerated on the service.  # noqa: E501

        :param user_groups: The user_groups of this Service.  # noqa: E501
        :type: list[GroupAccount]
        """

        self._user_groups = user_groups

    @property
    def users(self):
        """Gets the users of this Service.  # noqa: E501

        The user accounts enumerated on the service.  # noqa: E501

        :return: The users of this Service.  # noqa: E501
        :rtype: list[UserAccount]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Service.

        The user accounts enumerated on the service.  # noqa: E501

        :param users: The users of this Service.  # noqa: E501
        :type: list[UserAccount]
        """

        self._users = users

    @property
    def vendor(self):
        """Gets the vendor of this Service.  # noqa: E501

        The vendor of the service.  # noqa: E501

        :return: The vendor of this Service.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Service.

        The vendor of the service.  # noqa: E501

        :param vendor: The vendor of this Service.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this Service.  # noqa: E501

        The version of the service.  # noqa: E501

        :return: The version of this Service.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Service.

        The version of the service.  # noqa: E501

        :param version: The version of this Service.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def web_applications(self):
        """Gets the web_applications of this Service.  # noqa: E501

        The web applications found on the service.  # noqa: E501

        :return: The web_applications of this Service.  # noqa: E501
        :rtype: list[WebApplication]
        """
        return self._web_applications

    @web_applications.setter
    def web_applications(self, web_applications):
        """Sets the web_applications of this Service.

        The web applications found on the service.  # noqa: E501

        :param web_applications: The web_applications of this Service.  # noqa: E501
        :type: list[WebApplication]
        """

        self._web_applications = web_applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
