# coding: utf-8

"""
    InsightVM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'builtin': 'bool',
        'description': 'str',
        'id': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'sections': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'builtin': 'builtin',
        'description': 'description',
        'id': 'id',
        'links': 'links',
        'name': 'name',
        'sections': 'sections',
        'type': 'type'
    }

    def __init__(self, builtin=None, description=None, id=None, links=None, name=None, sections=None, type=None):  # noqa: E501
        """ReportTemplate - a model defined in Swagger"""  # noqa: E501
        self._builtin = None
        self._description = None
        self._id = None
        self._links = None
        self._name = None
        self._sections = None
        self._type = None
        self.discriminator = None
        if builtin is not None:
            self.builtin = builtin
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if sections is not None:
            self.sections = sections
        if type is not None:
            self.type = type

    @property
    def builtin(self):
        """Gets the builtin of this ReportTemplate.  # noqa: E501

        Whether the report template is builtin.  # noqa: E501

        :return: The builtin of this ReportTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._builtin

    @builtin.setter
    def builtin(self, builtin):
        """Sets the builtin of this ReportTemplate.

        Whether the report template is builtin.  # noqa: E501

        :param builtin: The builtin of this ReportTemplate.  # noqa: E501
        :type: bool
        """

        self._builtin = builtin

    @property
    def description(self):
        """Gets the description of this ReportTemplate.  # noqa: E501

        The description of the report template.  # noqa: E501

        :return: The description of this ReportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportTemplate.

        The description of the report template.  # noqa: E501

        :param description: The description of this ReportTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ReportTemplate.  # noqa: E501

        The identifier of the report template;  # noqa: E501

        :return: The id of this ReportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportTemplate.

        The identifier of the report template;  # noqa: E501

        :param id: The id of this ReportTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this ReportTemplate.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this ReportTemplate.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportTemplate.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this ReportTemplate.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this ReportTemplate.  # noqa: E501

        The name of the report template.  # noqa: E501

        :return: The name of this ReportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportTemplate.

        The name of the report template.  # noqa: E501

        :param name: The name of this ReportTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sections(self):
        """Gets the sections of this ReportTemplate.  # noqa: E501

        The sections that comprise the `document` report template.  # noqa: E501

        :return: The sections of this ReportTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this ReportTemplate.

        The sections that comprise the `document` report template.  # noqa: E501

        :param sections: The sections of this ReportTemplate.  # noqa: E501
        :type: list[str]
        """

        self._sections = sections

    @property
    def type(self):
        """Gets the type of this ReportTemplate.  # noqa: E501

        The type of the report template. `document` is a templatized, typically printable, report that has various sections of content. `export` is data-oriented output, typically CSV. `file` is a printable report template using a report template file.  # noqa: E501

        :return: The type of this ReportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportTemplate.

        The type of the report template. `document` is a templatized, typically printable, report that has various sections of content. `export` is data-oriented output, typically CSV. `file` is a printable report template using a report template file.  # noqa: E501

        :param type: The type of this ReportTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["document", "export", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
